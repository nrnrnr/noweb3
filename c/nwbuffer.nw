% -*- mode: Noweb; noweb-code-mode: c-mode; c-indent-level: 8 -*-

\ifx\chapter\undefined\let\chapter=\section\fi

\chapter{An internal buffer for noweb files}

Noweb depends on an internal pipeline structure to pass information
from one stage to the next.  This information passing occurs in a
[[NowebBuffer]], which is essentially a sequence of pairs as described
below.

\section{Interface}

The abstract data type [[NowebBuffer]] is used to represent the
unbounded buffer shared between stages of the internal Noweb
pipeline.  [[NowebPair]]s, which contain a special [[NowebKey]] and a
value, are stored in and read from this buffer.  Operations that read
from this buffer do not alter the contents of the buffer.

[[NowebBuffer_create]] takes no parameters.  It creates a new, empty
[[NowebBuffer]].

[[NowebBuffer_length]] tells how many pairs are in a buffer.

[[NowebBuffer_put]] adds the pair [[(predefined, value)]] to the end
of [[nwbuffer]].

[[NowebBuffer_put_str]] also adds a pair to the end of
[[nwbuffer]].  In the case that the pair needed does not have a
corresponding predefined key, this function may be used to add a
string key to the buffer.  

[[NowebBuffer_put_pair]] adds an existing pair to the end
of [[nwbuffer]].
It makes a copy of the pair, so the caller need not preserve the
memory that is pointed to.

[[NowebBuffer_pull]] removes a pair from the end of [[nwbuffer]],
returning that pair.
It is a checked runtime error to attempt to
remove a pair from an empty buffer.

[[NowebBuffer_read]] returns the pair at [[loc]] in [[nwbuffer]] and
moves [[loc]] to point to the next pair in [[nwbuffer]].

[[NowebBuffer_free]] deallocates all memory assigned to [[nwbuffer]].
It is a checked runtime error to pass a NULL value to this function.

[[NowebBuffer_reader]] takes a [[NowebBuffer]] as a parameter and
returns an abstraction that enables sequential reading of the pairs in
the buffer.  [[NowebBuffer_read]] returns the elements one by one,
returning [[NULL]] when the buffer is empty.

[[NowebBuffer_toascii]] in Lua-2.5 writes the contents of a buffer on an output
file passed as an argument. But in Lua-3.0 it writes to a file named by the
argument.
<<header>>=
#ifndef NWBUFFER_H
#define NWBUFFER_H

#define T NowebBuffer
typedef struct T* T;
typedef struct NowebPair* NowebPair;
typedef struct NowebReader* NowebReader;

<<definition of [[NowebKey]]>>
<<definition of [[struct NowebPair]]>>

extern T    NowebBuffer_create    (void);
extern int  NowebBuffer_length    (T nwbuffer);
extern T    NowebBuffer_put       (T nwbuffer, NowebKey predefined, const char* value);
extern T    NowebBuffer_put_str   (T nwbuffer, const char* new_key, const char* value);
extern T    NowebBuffer_put_pair  (T nwbuffer, NowebPair pair);
struct NowebPair   NowebBuffer_pull   (T nwbuffer);
extern NowebReader NowebBuffer_reader (T);
extern NowebPair   NowebBuffer_read   (NowebReader);
extern void NowebBuffer_free          (T* nwbuffer);

extern int  NowebBuffer_is_index(NowebKey key);
<<header ((lua2))>>=
extern int NowebBuffer_toascii(void * /*output file*/, NowebBuffer buf,
			       NowebBuffer ignored);
<<header ((lua3))>>=
extern int NowebBuffer_toascii(void * /*output file name*/, NowebBuffer buf,
			       NowebBuffer ignored);
<<header>>=
extern char *NowebBuffer_pairstring(NowebPair pair);
         /* malloc and return string rep of pair -- likely to be expensive */
#undef T
#endif
@ 

The buffer is stored with objects of type [[NowebPair]], which contain
a [[key]] and a [[value]].  
In most cases the [[key]] will be one of a
predefined set (a [[NowebKey]]), but the interface allows for
extensibility through [[keystr]].
If [[p.key]] is [[NW_XXX_STRINGKEY]], then [[p.keystr]] holds a
pointer to a string that defines the key.
Regardless, [[p.value]] is the value.
Values may be omitted, in which case the corresponding pointers are
[[NULL]].
All [[value]] fields are immutable and must be atoms in the sense of
the [[Atom]] interface.
Strings stored in [[p.keystr]] must also be atoms.
<<definition of [[struct NowebPair]]>>=
struct NowebPair {
  NowebKey key;
  const char *keystr;       /* meaningful iff key == NW_XXX_STRINGKEY */
  const char *value;
};
@ Although the ``pair'' in the interface requires three words of
memory, an aggressive implementation could use only two words to store
pairs with predefined keys, at the cost of needing four words to store
pairs with string keys.
@
Each [[NowebKey]] has a string equivalent, which is to be used in the
external pipeline representation as specified in the Hackers' Guide.
The idea of the [[NowebKey]]s is that they are compile-time constants
and therefore can be checked much more efficiently than strings--even
strings that are atoms.  It is therefore an unchecked runtime error to
use the string equivalent of any [[NowebKey]] in the representation.
@
We play some macro tricks to deal with the keys.
The format is:
[[xx(name, printf args)]]
<<key macros>>=
xx(NW_BEGIN_CODE,      	(fp, "@begin code %s\n", VAL))
xx(NW_BEGIN_DOCS,       (fp, "@begin docs %s\n", VAL))
xx(NW_END_CODE,         (fp, "@end code %s\n", VAL))
xx(NW_END_DOCS,         (fp, "@end docs %s\n", VAL))
xx(NW_TEXT,             (fp, "@text %s\n", VAL))
xx(NW_NL,               (fp, "@nl\n"))
xx(NW_DEFN,             (fp, "@defn %s\n", VAL))
xx(NW_USE,              (fp, "@use %s\n", VAL))
xx(NW_QUOTE,            (fp, "@quote\n"))
xx(NW_ENDQUOTE,         (fp, "@endquote\n"))
xx(NW_FILE,             (fp, "@file %s\n", VAL))
xx(NW_LINE,             (fp, "@line %s\n", VAL))
xx(NW_LANGUAGE,         (fp, "@language %s\n", VAL))
xx(NW_HEADER,           (fp, "@header %s\n", VAL))
xx(NW_TRAILER,          (fp, "@trailer %s\n", VAL))
xx(NW_INDEX_DEFN,       (fp, "@index defn %s\n", VAL))
xx(NW_INDEX_LOCALDEFN,  (fp, "@index localdefn %s\n", VAL))
xx(NW_INDEX_USE,        (fp, "@index use %s\n", VAL))
xx(NW_INDEX_NL,         (fp, "@index nl\n"))
xx(NW_INDEX_BEGINDEFS,  (fp, "@index begindefs\n"))
xx(NW_INDEX_ISUSED,     (fp, "@index isused %s\n", VAL))
xx(NW_INDEX_DEFITEM,    (fp, "@index defitem %s\n", VAL))
xx(NW_INDEX_ENDDEFS,    (fp, "@index enddefs\n"))
xx(NW_INDEX_BEGINUSES,  (fp, "@index beginuses\n"))
xx(NW_INDEX_ISDEFINED,  (fp, "@index isdefined %s\n", VAL))
xx(NW_INDEX_USEITEM,    (fp, "@index useitem %s\n", VAL))
xx(NW_INDEX_ENDUSES,    (fp, "@index enduses\n"))
xx(NW_INDEX_BEGININDEX, (fp, "@index beginindex\n"))
xx(NW_INDEX_ENTRYBEGIN, (fp, "@index entrybegin %s\n", VAL))
xx(NW_INDEX_ENTRYUSE,   (fp, "@index entryuse %s\n", VAL))
xx(NW_INDEX_ENTRYDEFN,  (fp, "@index entrydefn %s\n", VAL))
xx(NW_INDEX_ENTRYEND,   (fp, "@index entryend\n"))
xx(NW_INDEX_ENDINDEX,   (fp, "@index endindex\n"))
xx(NW_XREF_LABEL,       (fp, "@xref label %s\n", VAL))
xx(NW_XREF_REF,         (fp, "@xref ref %s\n", VAL))
xx(NW_XREF_PREVDEF,     (fp, "@xref prevdef %s\n", VAL))
xx(NW_XREF_NEXTDEF,     (fp, "@xref nextdef %s\n", VAL))
xx(NW_XREF_BEGINDEFS,   (fp, "@xref begindefs\n"))
xx(NW_XREF_DEFITEM,     (fp, "@xref defitem %s\n", VAL))
xx(NW_XREF_ENDDEFS,     (fp, "@xref enddefs\n"))
xx(NW_XREF_BEGINUSES,   (fp, "@xref beginuses\n"))
xx(NW_XREF_USEITEM,     (fp, "@xref useitem %s\n", VAL))
xx(NW_XREF_ENDUSES,     (fp, "@xref enduses\n"))
xx(NW_XREF_NOTUSED,     (fp, "@xref notused %s\n", VAL))
xx(NW_XREF_BEGINCHUNKS, (fp, "@xref beginchunks\n"))
xx(NW_XREF_CHUNKBEGIN,  (fp, "@xref chunkbegin %s\n", VAL))
xx(NW_XREF_CHUNKUSE,    (fp, "@xref chunkuse %s\n", VAL))
xx(NW_XREF_CHUNKDEFN,   (fp, "@xref chunkdefn %s\n", VAL))
xx(NW_XREF_CHUNKEND,    (fp, "@xref chunkend\n"))
xx(NW_XREF_ENDCHUNKS,   (fp, "@xref endchunks\n"))
xx(NW_XREF_TAG,        	(fp, "@xref tag %s\n", VAL))
xx(NW_FATAL,           	(fp, "@fatal %s\n", VAL))
@ 
I rely on clustering to identify classes of keywords.
<<nwbuffer functions>>=
int NowebBuffer_is_index(NowebKey key) {
  return NW_INDEX_DEFN <= key && key <= NW_INDEX_ENDINDEX;
} 
@
For values, clients may use ordinary strings or atoms at their
discretion. 
<<definition of [[NowebKey]]>>=
typedef enum keys { 
#define xx(NAME, PRINTARGS) NAME,
  <<key macros>>
#undef xx
  NW_XXX_STRINGKEY
} NowebKey;
@
\section{Implementation}

This implementation makes no effort to cram predefined pairs into two words.
<<*>>=
#include <stdio.h>
#include <assert.h>
#include <seq.h>
#include <string.h>
#include <mem.h>

#include "nwbuffer.h"

#define T NowebBuffer

<<nwbuffer declarations>>
<<nwbuffer functions>>
#undef T
@
The implementation uses a doubly-linked list of arenas of [[ARENASIZE]] pairs each.
A prior implementation used [[500]] pairs initially in a sequence
(which perhaps also means growth by 500 each time),
based on some measurements using the noweb source files.
This implementation uses an arena size of 
[[128]] because it is where the knee in the performance
curve seems to be on the machine being used to develop this
(a 233 MHz Pentium II running Plan 9 and compiling using the APE environment's malloc).
The code works with [[1]] and [[2]], from which rsc concludes that it works for all values.
<<nwbuffer declarations>>=
enum {
  ARENASIZE = 128
};
<<nwbuffer declarations>>=
struct NowebBufferArena {
  struct NowebPair base[ARENASIZE];
  struct NowebPair *freep;
  struct NowebPair *limitp;
  struct NowebBufferArena *prev;
  struct NowebBufferArena *next;
};
@ %
The [[limitp]] pointer points to the end of the arena,
while the [[freep]] pointer points past the last used pair.
@
A [[NowebBuffer]] is just the list of arenas.
To make writing easy, we also keep the
arena currently being written.
<<nwbuffer declarations>>=
struct NowebBuffer {
  struct NowebBufferArena *arenalist;
  struct NowebBufferArena *wr;
  int length;
};
@
<<nwbuffer functions>>=
T NowebBuffer_create() {
  T new_buffer;

  new_buffer = ALLOC(sizeof(struct T));
  memset(new_buffer, 0, sizeof(struct T));
  return new_buffer;
}
@ 
<<nwbuffer functions>>=
int NowebBuffer_length (T nwbuffer) {
  return nwbuffer->length;
}
@ 
[[NowebBuffer_put]] appends a [[NowebPair]] to the end of
[[nwbuffer]].  The pair that is added must be one containing a
predefined key; the contents of this pair are passed as the second and
third parameters.
<<nwbuffer functions>>=
T NowebBuffer_put(T nwbuffer, NowebKey predefined, const char* value) {
  NowebPair new_pair;

  new_pair = NowebBuffer_next_write_pair(nwbuffer);
  new_pair->key = predefined;
  new_pair->value = value;
  return nwbuffer;
}
@ %
The helper [[NowebBuffer_next_write_pair]] makes sure there is
room for one more pair and returns a pointer to it.
<<nwbuffer declarations>>=
static NowebPair NowebBuffer_next_write_pair(T nwbuffer);
<<nwbuffer functions>>=
static NowebPair
NowebBuffer_next_write_pair(T nwbuffer)
{
  struct NowebBufferArena *a;

  if(nwbuffer->wr == NULL || nwbuffer->wr->freep == nwbuffer->wr->limitp) {
    /* can happen because of pull */
    if(nwbuffer->wr && nwbuffer->wr->next)
      a = nwbuffer->wr->next;
    else {
      a = ALLOC(sizeof(*a));
      a->freep = a->base;
      a->limitp = a->base+ARENASIZE;
      a->prev = nwbuffer->wr;
      a->next = NULL;
      if(a->prev)
        a->prev->next = a;
      else
        nwbuffer->arenalist = a;
    }
    nwbuffer->wr = a;
  }

  assert(nwbuffer->wr->freep < nwbuffer->wr->limitp);
  nwbuffer->length++;
  return nwbuffer->wr->freep++;
}
@
[[NowebBuffer_put_str]] allows a new pair to be added to the end of the
buffer.
<<nwbuffer functions>>=
T NowebBuffer_put_str(T nwbuffer, const char* new_key, const char* value) {
  NowebPair new_pair;

  new_pair = NowebBuffer_next_write_pair(nwbuffer);
  new_pair->key = NW_XXX_STRINGKEY;
  new_pair->keystr = new_key;
  new_pair->value = value;
  return nwbuffer;
}
@ 
We can also simply append pairs.
<<nwbuffer functions>>=
T NowebBuffer_put_pair (T nwbuffer, NowebPair pair) {
  *NowebBuffer_next_write_pair(nwbuffer) = *pair;
  return nwbuffer;
}
@ To pull a pair we just back up the write pointer.
<<nwbuffer functions>>=
struct NowebPair NowebBuffer_pull(T nwbuffer) {
  assert(nwbuffer->length > 0);
  if(nwbuffer->wr->freep == nwbuffer->wr->base) {
    nwbuffer->wr = nwbuffer->wr->prev;
    assert(nwbuffer->wr->freep == nwbuffer->wr->limitp);
  }
  --nwbuffer->length;
  return *--nwbuffer->wr->freep;
}
@ 
The read function requires passing a pointer to the [[NowebReader]],
which holds a finger pointing at the next place to read.
<<nwbuffer declarations>>=
struct NowebReader {
  NowebBuffer buf;
  struct NowebBufferArena *a;
  struct NowebPair *readp;
};
@ 
[[NowebBuffer_reader]] creates a new structure.
The arena and pair pointers will be ``faulted in'' on the
first read.
<<nwbuffer functions>>=
NowebReader NowebBuffer_reader(T nwbuffer) {
  struct NowebReader* rdr;

  rdr = ALLOC(sizeof(*rdr));
  memset(rdr, 0, sizeof(*rdr));
  rdr->buf = nwbuffer;
  return rdr;
}
@
[[NowebBuffer_read]] simply returns the next pair in [[buf]].
In the case that we are out of input,
the function returns NULL.
<<nwbuffer functions>>=
NowebPair NowebBuffer_read (NowebReader rdr) {
  if(rdr->a == NULL) {
    rdr->a = rdr->buf->arenalist;
    if(rdr->a == NULL)
      return NULL;
    rdr->readp = rdr->a->base;
  }

  if(rdr->readp == rdr->a->limitp && rdr->a->next != NULL) {
    rdr->a = rdr->a->next;
    rdr->readp = rdr->a->base;
  }

  if(rdr->readp == rdr->a->freep)
    return NULL;

  assert(rdr->a->base <= rdr->readp && rdr->readp < rdr->a->freep);
  return rdr->readp++;
}
@ %
Apparently there is no way to free a [[NowebReader]]. (--rsc)
@
[[NowebBuffer_free]] frees all the storage associated with the buffer.
<<nwbuffer functions>>=
void NowebBuffer_free(T* nwbuffer) {
  struct NowebBufferArena *a, *anext;

  for(a=(*nwbuffer)->arenalist; a; a=anext) {
    anext = a->next;
    FREE(a);
  }
  FREE(*nwbuffer);
  *nwbuffer = NULL;
}
@ %
The old implementation didn't set [[*nwbuffer = NULL]] (--rsc).
@
<<nwbuffer functions ((lua2))>>=
int NowebBuffer_toascii(void *out /*output*/, NowebBuffer in, NowebBuffer ignored) {
  FILE *fp = out;
  NowebReader rdr = NowebBuffer_reader(in);
  NowebPair pair;
  
  for (pair = NowebBuffer_read(rdr); pair; pair = NowebBuffer_read(rdr)) {
    switch(pair->key) {
      case NW_XXX_STRINGKEY:
	fprintf(fp, "@%s %s\n", pair->keystr, pair->value);
	break;
#define VAL (pair->value)
#define xx(NAME, PRINTARGS) case NAME: fprintf PRINTARGS; break;
<<key macros>>
#undef xx
#undef VAL
      default: 
        assert(0);
    }
  }
  return 0;
}
<<nwbuffer functions ((lua3))>>=
int NowebBuffer_toascii(void *out /*output*/, NowebBuffer in, NowebBuffer ignored) {
  FILE *fp = stdout;
  char *outname = out;
  if(outname != NULL)
    fp = fopen(outname,"w");
  NowebReader rdr = NowebBuffer_reader(in);
  NowebPair pair;

  for (pair = NowebBuffer_read(rdr); pair; pair = NowebBuffer_read(rdr)) {
    switch(pair->key) {
      case NW_XXX_STRINGKEY:
	fprintf(fp, "@%s %s\n", pair->keystr, pair->value);
	break;
#define VAL (pair->value)
#define xx(NAME, PRINTARGS) case NAME: fprintf PRINTARGS; break;
<<key macros>>
#undef xx
#undef VAL
      default:
        assert(0);
    }
  }
  if(outname != NULL)
    fclose(fp);
  return 0;
}
@ 
<<nwbuffer functions>>=
static int pairbufsize(NowebPair p, char *fmt, ...) {
  switch (p->key) {
  case NW_XXX_STRINGKEY:
    return 4 + strlen(p->keystr) + strlen(p->value);
  default:
    if (strstr(fmt, "%s"))
      return 4 + strlen(fmt) + strlen(p->value);
    else
      return 4 + strlen(fmt);
  }
}

char *NowebBuffer_pairstring(NowebPair pair) {
  char *fp;
  int bufsize, n;

  <<set [[bufsize]] for [[pair]]>>
  fp = ALLOC(bufsize);
  assert(fp);
  switch(pair->key) {
    case NW_XXX_STRINGKEY:
	n = sprintf(fp, "@%s %s\n", pair->keystr, pair->value);
	break;
#define VAL (pair->value)
#define xx(NAME, PRINTARGS) case NAME: n = sprintf PRINTARGS; break;
<<key macros>>
#undef xx
#undef VAL
      default: 
        assert(0);
  }
  assert (n < bufsize);
  if (fp[strlen(fp)-1] == '\n')
    fp[strlen(fp)-1] = '\0';
  return fp;
}

<<set [[bufsize]] for [[pair]]>>=
switch (pair->key) {
#define VAL (pair->value)
#define fp pair
#define xx(NAME, PRINTARGS) case NAME: bufsize = pairbufsize PRINTARGS; break;
<<key macros>>
#undef xx
#undef fp
#undef VAL
default : bufsize = pairbufsize(pair, ""); break;
}
@ 
@ 

