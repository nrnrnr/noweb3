% -*- mode: Noweb; noweb-code-mode: c-mode -*-
<<header>>=
#include "nwbuffer.h"
extern int readascii(void *infile, NowebBuffer ignored, NowebBuffer buf);
  /* infile should be FILE * */
<<*>>=
<<fromascii.c>>
<<fromascii.c>>=
#include <stdio.h>
#include <ctype.h>
#include <string.h>
#include "errors.h"
#include "getline.h"
#include "nwbuffer.h"
#include "atom.h"
@ 
[[ARG_AT(N)]] overwrites the trailing newline with a null character, then
returns that portion of the input line starting at~[[N]].
It is used to recover the argument from keywords that take arguments.
<<fromascii.c ((lua2))>>=
int readascii(void *arg, NowebBuffer ignored, NowebBuffer buf) {
  FILE *in = arg;
  char *p;
  int n;
#define ARG_AT(N) ((p[n] = '\0'), Atom_string(p+N))
  while ((p = getline(in))) {
    if (p[0] != '@' || !isalpha(p[1])) 
      errormsg(Fatal, "Invalid line in noweb pipeline: %s", p);
    n = strlen(p)-1;    
    <<automatically generated recognizer>>    
    continue;
  string:
    <<scan to first blank (if any) and call [[NowebBuffer_put_str]]>>
  }
  return errorrc;
}
<<fromascii.c ((lua3))>>=
int readascii(void *arg, NowebBuffer ignored, NowebBuffer buf) {
  FILE *in = stdin;
  char *inname = arg;
  if(inname != NULL)
    in = fopen(inname,"r");
  char *p;
  int n;
#define ARG_AT(N) ((p[n] = '\0'), Atom_string(p+N))
  while ((p = getline(in))) {
    if (p[0] != '@' || !isalpha(p[1]))
      errormsg(Fatal, "Invalid line in noweb pipeline: %s", p);
    n = strlen(p)-1;
    <<automatically generated recognizer>>
    continue;
  string:
    <<scan to first blank (if any) and call [[NowebBuffer_put_str]]>>
  }
  if(inname != NULL)
    fclose(in);
  return errorrc;
}
@ 
<<scan to first blank (if any) and call [[NowebBuffer_put_str]]>>=
{ char *bl;
  p[n] = '\0';
  for (bl = p+1; *bl && !isspace(*bl); bl++);
  if (*bl) {
    *bl = '\0';
    NowebBuffer_put_str(buf, Atom_string(p+1), Atom_string(bl+1));
  } else {
    NowebBuffer_put_str(buf, Atom_string(p+1), NULL);
  }
}
@ 
% cut here to regenerate automatic parts
<<automatically generated recognizer>>=
switch (p[1]) {
  case 'b':
    if (p[2] == 'e' && p[3] == 'g' && p[4] == 'i' && p[5] == 'n' && p[6] == ' ') {
      if (p[7] == 'c' && p[8] == 'o' && p[9] == 'd' && p[10] == 'e' && p[11] == ' ') {
        NowebBuffer_put(buf, NW_BEGIN_CODE, ARG_AT(12));
      } else
      if (p[7] == 'd' && p[8] == 'o' && p[9] == 'c' && p[10] == 's' && p[11] == ' ') {
        NowebBuffer_put(buf, NW_BEGIN_DOCS, ARG_AT(12));
      } else
      goto string;
    } else
      goto string;
  break;
  case 'd':
    if (p[2] == 'e' && p[3] == 'f' && p[4] == 'n' && p[5] == ' ') {
      NowebBuffer_put(buf, NW_DEFN, ARG_AT(6));
    } else
      goto string;
  break;
  case 'e':
    if (p[2] == 'n' && p[3] == 'd') {
      if (p[4] == ' ') {
        if (p[5] == 'c' && p[6] == 'o' && p[7] == 'd' && p[8] == 'e' && p[9] == ' ') {
          NowebBuffer_put(buf, NW_END_CODE, ARG_AT(10));
        } else
        if (p[5] == 'd' && p[6] == 'o' && p[7] == 'c' && p[8] == 's' && p[9] == ' ') {
          NowebBuffer_put(buf, NW_END_DOCS, ARG_AT(10));
        } else
        goto string;
      } else
      if (p[4] == 'q' && p[5] == 'u' && p[6] == 'o' && p[7] == 't' && p[8] == 'e' && p[9] == '\n') {
        NowebBuffer_put(buf, NW_ENDQUOTE, NULL);
      } else
      goto string;
    } else
      goto string;
  break;
  case 'f':
    if (p[2] == 'a' && p[3] == 't' && p[4] == 'a' && p[5] == 'l' && p[6] == ' ') {
      NowebBuffer_put(buf, NW_FATAL, ARG_AT(7));
    } else
    if (p[2] == 'i' && p[3] == 'l' && p[4] == 'e' && p[5] == ' ') {
      NowebBuffer_put(buf, NW_FILE, ARG_AT(6));
    } else
    goto string;
  break;
  case 'h':
    if (p[2] == 'e' && p[3] == 'a' && p[4] == 'd' && p[5] == 'e' && p[6] == 'r' && p[7] == ' ') {
      NowebBuffer_put(buf, NW_HEADER, ARG_AT(8));
    } else
      goto string;
  break;
  case 'i':
    if (p[2] == 'n' && p[3] == 'd' && p[4] == 'e' && p[5] == 'x' && p[6] == ' ') {
      if (p[7] == 'b' && p[8] == 'e' && p[9] == 'g' && p[10] == 'i' && p[11] == 'n') {
        if (p[12] == 'd' && p[13] == 'e' && p[14] == 'f' && p[15] == 's' && p[16] == '\n') {
          NowebBuffer_put(buf, NW_INDEX_BEGINDEFS, NULL);
        } else
        if (p[12] == 'i' && p[13] == 'n' && p[14] == 'd' && p[15] == 'e' && p[16] == 'x' && p[17] == '\n') {
          NowebBuffer_put(buf, NW_INDEX_BEGININDEX, NULL);
        } else
        if (p[12] == 'u' && p[13] == 's' && p[14] == 'e' && p[15] == 's' && p[16] == '\n') {
          NowebBuffer_put(buf, NW_INDEX_BEGINUSES, NULL);
        } else
        goto string;
      } else
      if (p[7] == 'd' && p[8] == 'e' && p[9] == 'f') {
        if (p[10] == 'i' && p[11] == 't' && p[12] == 'e' && p[13] == 'm' && p[14] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_DEFITEM, ARG_AT(15));
        } else
        if (p[10] == 'n' && p[11] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_DEFN, ARG_AT(12));
        } else
        goto string;
      } else
      if (p[7] == 'e' && p[8] == 'n') {
        if (p[9] == 'd') {
          if (p[10] == 'd' && p[11] == 'e' && p[12] == 'f' && p[13] == 's' && p[14] == '\n') {
            NowebBuffer_put(buf, NW_INDEX_ENDDEFS, NULL);
          } else
          if (p[10] == 'i' && p[11] == 'n' && p[12] == 'd' && p[13] == 'e' && p[14] == 'x' && p[15] == '\n') {
            NowebBuffer_put(buf, NW_INDEX_ENDINDEX, NULL);
          } else
          if (p[10] == 'u' && p[11] == 's' && p[12] == 'e' && p[13] == 's' && p[14] == '\n') {
            NowebBuffer_put(buf, NW_INDEX_ENDUSES, NULL);
          } else
          goto string;
        } else
        if (p[9] == 't' && p[10] == 'r' && p[11] == 'y') {
          if (p[12] == 'b' && p[13] == 'e' && p[14] == 'g' && p[15] == 'i' && p[16] == 'n' && p[17] == ' ') {
            NowebBuffer_put(buf, NW_INDEX_ENTRYBEGIN, ARG_AT(18));
          } else
          if (p[12] == 'd' && p[13] == 'e' && p[14] == 'f' && p[15] == 'n' && p[16] == ' ') {
            NowebBuffer_put(buf, NW_INDEX_ENTRYDEFN, ARG_AT(17));
          } else
          if (p[12] == 'e' && p[13] == 'n' && p[14] == 'd' && p[15] == '\n') {
            NowebBuffer_put(buf, NW_INDEX_ENTRYEND, NULL);
          } else
          if (p[12] == 'u' && p[13] == 's' && p[14] == 'e' && p[15] == ' ') {
            NowebBuffer_put(buf, NW_INDEX_ENTRYUSE, ARG_AT(16));
          } else
          goto string;
        } else
        goto string;
      } else
      if (p[7] == 'i' && p[8] == 's') {
        if (p[9] == 'd' && p[10] == 'e' && p[11] == 'f' && p[12] == 'i' && p[13] == 'n' && p[14] == 'e' && p[15] == 'd' && p[16] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_ISDEFINED, ARG_AT(17));
        } else
        if (p[9] == 'u' && p[10] == 's' && p[11] == 'e' && p[12] == 'd' && p[13] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_ISUSED, ARG_AT(14));
        } else
        goto string;
      } else
      if (p[7] == 'l' && p[8] == 'o' && p[9] == 'c' && p[10] == 'a' && p[11] == 'l' && p[12] == 'd' && p[13] == 'e' && p[14] == 'f' && p[15] == 'n' && p[16] == ' ') {
        NowebBuffer_put(buf, NW_INDEX_LOCALDEFN, ARG_AT(17));
      } else
      if (p[7] == 'n' && p[8] == 'l' && p[9] == '\n') {
        NowebBuffer_put(buf, NW_INDEX_NL, NULL);
      } else
      if (p[7] == 'u' && p[8] == 's' && p[9] == 'e') {
        if (p[10] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_USE, ARG_AT(11));
        } else
        if (p[10] == 'i' && p[11] == 't' && p[12] == 'e' && p[13] == 'm' && p[14] == ' ') {
          NowebBuffer_put(buf, NW_INDEX_USEITEM, ARG_AT(15));
        } else
        goto string;
      } else
      goto string;
    } else
      goto string;
  break;
  case 'l':
    if (p[2] == 'a' && p[3] == 'n' && p[4] == 'g' && p[5] == 'u' && p[6] == 'a' && p[7] == 'g' && p[8] == 'e' && p[9] == ' ') {
      NowebBuffer_put(buf, NW_LANGUAGE, ARG_AT(10));
    } else
    if (p[2] == 'i' && p[3] == 'n' && p[4] == 'e' && p[5] == ' ') {
      NowebBuffer_put(buf, NW_LINE, ARG_AT(6));
    } else
    goto string;
  break;
  case 'n':
    if (p[2] == 'l' && p[3] == '\n') {
      NowebBuffer_put(buf, NW_NL, NULL);
    } else
      goto string;
  break;
  case 'q':
    if (p[2] == 'u' && p[3] == 'o' && p[4] == 't' && p[5] == 'e' && p[6] == '\n') {
      NowebBuffer_put(buf, NW_QUOTE, NULL);
    } else
      goto string;
  break;
  case 't':
    if (p[2] == 'e' && p[3] == 'x' && p[4] == 't' && p[5] == ' ') {
      NowebBuffer_put(buf, NW_TEXT, ARG_AT(6));
    } else
    if (p[2] == 'r' && p[3] == 'a' && p[4] == 'i' && p[5] == 'l' && p[6] == 'e' 
&& p[7] == 'r' && p[8] == ' ') {
      NowebBuffer_put(buf, NW_TRAILER, ARG_AT(9));
    } else
    goto string;
  break;
  case 'u':
    if (p[2] == 's' && p[3] == 'e' && p[4] == ' ') {
      NowebBuffer_put(buf, NW_USE, ARG_AT(5));
    } else
      goto string;
  break;
  case 'x':
    if (p[2] == 'r' && p[3] == 'e' && p[4] == 'f' && p[5] == ' ') {
      if (p[6] == 'b' && p[7] == 'e' && p[8] == 'g' && p[9] == 'i' && p[10] == 'n') {
        if (p[11] == 'c' && p[12] == 'h' && p[13] == 'u' && p[14] == 'n' && p[15] == 'k' && p[16] == 's' && p[17] == '\n') {
          NowebBuffer_put(buf, NW_XREF_BEGINCHUNKS, NULL);
        } else
        if (p[11] == 'd' && p[12] == 'e' && p[13] == 'f' && p[14] == 's' && p[15] == '\n') {
          NowebBuffer_put(buf, NW_XREF_BEGINDEFS, NULL);
        } else
        if (p[11] == 'u' && p[12] == 's' && p[13] == 'e' && p[14] == 's' && p[15] == '\n') {
          NowebBuffer_put(buf, NW_XREF_BEGINUSES, NULL);
        } else
        goto string;
      } else
      if (p[6] == 'c' && p[7] == 'h' && p[8] == 'u' && p[9] == 'n' && p[10] == 'k') {
        if (p[11] == 'b' && p[12] == 'e' && p[13] == 'g' && p[14] == 'i' && p[15] == 'n' && p[16] == ' ') {
          NowebBuffer_put(buf, NW_XREF_CHUNKBEGIN, ARG_AT(17));
        } else
        if (p[11] == 'd' && p[12] == 'e' && p[13] == 'f' && p[14] == 'n' && p[15] == ' ') {
          NowebBuffer_put(buf, NW_XREF_CHUNKDEFN, ARG_AT(16));
        } else
        if (p[11] == 'e' && p[12] == 'n' && p[13] == 'd' && p[14] == '\n') {
          NowebBuffer_put(buf, NW_XREF_CHUNKEND, NULL);
        } else
        if (p[11] == 'u' && p[12] == 's' && p[13] == 'e' && p[14] == ' ') {
          NowebBuffer_put(buf, NW_XREF_CHUNKUSE, ARG_AT(15));
        } else
        goto string;
      } else
      if (p[6] == 'd' && p[7] == 'e' && p[8] == 'f' && p[9] == 'i' && p[10] == 't' && p[11] == 'e' && p[12] == 'm' && p[13] == ' ') {
        NowebBuffer_put(buf, NW_XREF_DEFITEM, ARG_AT(14));
      } else
      if (p[6] == 'e' && p[7] == 'n' && p[8] == 'd') {
        if (p[9] == 'c' && p[10] == 'h' && p[11] == 'u' && p[12] == 'n' && p[13] == 'k' && p[14] == 's' && p[15] == '\n') {
          NowebBuffer_put(buf, NW_XREF_ENDCHUNKS, NULL);
        } else
        if (p[9] == 'd' && p[10] == 'e' && p[11] == 'f' && p[12] == 's' && p[13] == '\n') {
          NowebBuffer_put(buf, NW_XREF_ENDDEFS, NULL);
        } else
        if (p[9] == 'u' && p[10] == 's' && p[11] == 'e' && p[12] == 's' && p[13] == '\n') {
          NowebBuffer_put(buf, NW_XREF_ENDUSES, NULL);
        } else
        goto string;
      } else
      if (p[6] == 'l' && p[7] == 'a' && p[8] == 'b' && p[9] == 'e' && p[10] == 'l' && p[11] == ' ') {
        NowebBuffer_put(buf, NW_XREF_LABEL, ARG_AT(12));
      } else
      if (p[6] == 'n') {
        if (p[7] == 'e' && p[8] == 'x' && p[9] == 't' && p[10] == 'd' && p[11] == 'e' && p[12] == 'f' && p[13] == ' ') {
          NowebBuffer_put(buf, NW_XREF_NEXTDEF, ARG_AT(14));
        } else
        if (p[7] == 'o' && p[8] == 't' && p[9] == 'u' && p[10] == 's' && p[11] == 'e' && p[12] == 'd' && p[13] == ' ') {
          NowebBuffer_put(buf, NW_XREF_NOTUSED, ARG_AT(14));
        } else
        goto string;
      } else
      if (p[6] == 'p' && p[7] == 'r' && p[8] == 'e' && p[9] == 'v' && p[10] == 'd' && p[11] == 'e' && p[12] == 'f' && p[13] == ' ') {
        NowebBuffer_put(buf, NW_XREF_PREVDEF, ARG_AT(14));
      } else
      if (p[6] == 'r' && p[7] == 'e' && p[8] == 'f' && p[9] == ' ') {
        NowebBuffer_put(buf, NW_XREF_REF, ARG_AT(10));
      } else
      if (p[6] == 't' && p[7] == 'a' && p[8] == 'g' && p[9] == ' ') {
        NowebBuffer_put(buf, NW_XREF_TAG, ARG_AT(10));
      } else
      if (p[6] == 'u' && p[7] == 's' && p[8] == 'e' && p[9] == 'i' && p[10] == 't' && p[11] == 'e' && p[12] == 'm' && p[13] == ' ') {
        NowebBuffer_put(buf, NW_XREF_USEITEM, ARG_AT(14));
      } else
      goto string;
    } else
      goto string;
  break;
  default:
    goto string;
}


