% -*- mode: Noweb; noweb-code-mode: c-mode -*-

\ifx\chapter\undefined\let\chapter=\section\fi

\chapter{Running programs in pipelines}

The pipeline structure is a method of sending the standard output of
one program into the standard input of another.  This is useful
when a program depends on the results from another program, as in the
case of several programs participating in an assembly line to modify
input into a single output.

\section{The External Pipeline interface}

The abstract data type [[XPipe]] is used here to represent the
series of programs that make up an external pipeline.  The following
functions are included in the interface:

[[XPipe_program]] is used to create an instance of [[XPipe]];
it takes the necessary information for the first program and returns a
pipeline containing that program call.  It is a checked runtime error
for the NULL pointer to be passed to any argument of
[[XPipe_program]].  The first argument is the name of the program
to be executed, which may or may not include an explicit path.  The
second argument is a table of [[char*]]'s corresponding to the
arguments to be sent to the program.  The third argument is the table
of environment variables which are to be passed the program.
N.B. that the sedond argument to [[XPipe_program]] should
\emph{not} contain a redundant copy of the program name; this is added at
execution time for the UNIX implementation.

[[XPipe_connect]] allows a new pipeline to be created by
concatenating two existing pipelines.  When executed, [[stdout]] of
the left pipeline is sent to [[stdin]] of the right pipeline.  It is a
checked runtime error for the NULL value to be passed to [[XPipe_connect]].

[[XPipe_print]] allows the contents of a pipeline to be displayed
graphically using the file pointer passed to it as a parameter.

[[XPipe_run]] travels down the pipeline and executes each
program, passing the standard output of one program into the standard
input of the next.

[[XPipe_free]] frees the memory allocated for the pipeline.  It
should be noted that there exist possible errors associated with this
function--smaller pipelines that are connected to form a larger
pipeline should not be freed using [[XPipe_free]].  If they are,
all stages that are associated with the freed pipeline will be lost in
the larger pipeline as well.

<<header>>=
#ifndef XPIPE_H
#define XPIPE_H

#include <stdio.h>
#ifndef fileno
extern int fileno(FILE *);  /* needed on linux ?! */
#endif
#include "atom.h"

#define T XPipe_T
typedef struct T* T;

extern T    XPipe_function     (int (*f)(void *cl, FILE *in, FILE *out), void *cl,
                                char *name);
extern T    XPipe_program      (char* path, char** argv, char** envp);
extern T    XPipe_connect      (T left, T right);
extern void XPipe_print        (FILE* fp, T pipeline);
extern int  XPipe_run      (T pipeline, FILE *in, FILE *out);
extern void XPipe_free         (T* pipeline);

#undef T
#endif
@ 

\section{Implementation common to all platforms}

The [[XPipe]] data type is designed so that the user may build a
pipeline, then either print or execute that pipeline.

The pipeline is implemented as a list of stages; each stage mimics
the parameters to the UNIX [[execve]] function that will eventually
run the program on that platform.  The [[struct XPipe_Stage]]
contains those three arguments.

The pipeline itself, represented by the [[struct XPipe]], is
simply a list of pointers to [[XPipe_Stage]].  There is an extra level
of indirection required to access this list, but this design was
chosen in order to hide the use of [[List_T]] (which will be explained
later) from the interface.

<<definition of [[struct XPipe_Stage]]>>=
struct XPipe_Program {
  const char* path;
  char** argv;
  char** envp;
};
struct XPipe_Function {
  int (*f)(void *, FILE *in, FILE *out);
  void *arg;
  const char *name;
};
struct XPipe_Stage {
  enum { Prog, Fun } tag;
  union {
    struct XPipe_Program prog;
    struct XPipe_Function fun;
  } u;
};
<<definition of [[struct XPipe]]>>=
struct T {
  List_T stages;
};
@

The [[List_T]] data type was chosen because, as pipelines are lists of
programs, they seem to match well with this data structure.

[[<<*>>]] is intended to contain all the platform-independent
implementation of the pipeline structure; this is basically everything
but the [[XPipe_run]] function and its helper functions.
[[<<*>>]] includes information regarding the representation,
building, and printing of the pipeline.

<<*>>=
#include <stdio.h>
#include <stdlib.h>
#include <assert.h>
#include "xpipe.h"
#include "list.h"
#include "mem.h"
#include "str.h"
#if defined(WIN32)
#include <Windows.h>
#include <io.h>
#endif

#define T XPipe_T
typedef struct XPipe_Stage* XPipe_Stage;

<<definition of [[struct XPipe_Stage]]>>
<<definition of [[struct XPipe]]>>
<<common functions>>

#undef T
@

[[XPipe_program]] builds a single-stage pipeline from parameters
containing information about the program that the stage is to
represent.

<<common functions>>=
T XPipe_program(char* path, char** argv, char** envp) {
  XPipe_Stage new_stage;
  T new_pipeline;
  assert(path && argv && envp);
  NEW(new_stage);
  NEW(new_pipeline);
  new_stage->tag = Prog;
  new_stage->u.prog.path = Atom_string(path);
  new_stage->u.prog.argv = argv;
  new_stage->u.prog.envp = envp;
  new_pipeline->stages = List_list(new_stage, NULL);
  return new_pipeline;
}
<<common functions>>=
T XPipe_function(int (*f)(void *, FILE *in, FILE *out), void *arg, char *name) {
  XPipe_Stage new_stage;
  T new_pipeline;
  assert(f);
  NEW(new_stage);
  NEW(new_pipeline);
  new_stage->tag = Fun;
  new_stage->u.fun.f    = f;
  new_stage->u.fun.arg  = arg;
  new_stage->u.fun.name = Atom_string(name);
  new_pipeline->stages = List_list(new_stage, NULL);
  return new_pipeline;
}
@ 
[[XPipe_connect]] uses the [[List_T]] data structure and its list
manipulation mechanisms to connect two pipelines together.
[[List_copy]] is used because [[List_append]] is destructive--it
copies the new list onto its first parameter.  Because of this call to
[[List_copy]], [[XPipe_connect]] is NOT destructive.

There is a possible memory leak associated with the use of
[[XPipe_connect]].  When it copies the left [[List_T]], it does not
copy the [[XPipe_Stage]]s that the list contains.  Therefore, when the
connected pipeline is later freed from memory, the original left
pipeline still exists--but it contains NULL stages in its list.  An
attempt to call [[XPipe_free]] on this list will then result in an
error.
<<common functions>>=
T XPipe_connect(T left, T right) {
  T new_pipeline;
  assert(left);
  assert(right);
  new_pipeline = ALLOC(sizeof(struct T));
  new_pipeline->stages = List_append(List_copy(left->stages), right->stages);
  return new_pipeline;
}
@ 
[[PrintQuotedString]] is used to convert any string containing a
single quotation mark, double quotation mark, space, or backslash into
a ``quoted'' string.  This new string is enclosed in single quotes,
and every other single quote that was part of the original string is
enclosed in its own set of double quotes.  This function is used by
[[XPipe_print]].
<<common functions>>=
char* PrintQuotedString(char* string) {
  int i = 1;
  int j;
  char* new_string;
  if ((j = Str_chr(string, i, 0, '\'')) ||
      (Str_chr(string, i, 0, '\"')) ||
      (Str_chr(string, i, 0, ' '))  ||
      (Str_chr(string, i, 0, '\\'))) {
    new_string = Str_cat("'", 1, 0, string, 1, j);
    while (j != 0) {
      i = j + 1;
      j = Str_chr(string, i, 0, '\'');
      new_string = Str_catv(new_string, 1, 0, "'\"'\"'", 1, 0, string, i, j, NULL);
    }
    new_string = Str_cat(new_string, 1, 0, "'", 1, 0);
    return new_string;
  }
  else return string;
}
@ 
[[XPipe_print]] prints an ASCII representation of the pipeline
structure to the file pointed to by [[fp]].
<<common functions>>=
void XPipe_print(FILE* fp, T pipeline) {
  List_T l = pipeline->stages;
  while (l) {
    XPipe_Stage stage = l->first;
    switch (stage->tag) {
      case Prog:
	fprintf(fp, "%s", stage->u.prog.path);
	<<print out the elements of [[stage->u.prog.argv]], separated by spaces>>
	break;
      case Fun:
	fprintf(fp, stage->u.fun.name);    
	break;
    }
    l = l->rest;
    if (l) fprintf(fp, "\n| ");
  }
}
@  
Each argument in the list is converted to be quoted if necessary.  See
the above description of [[PrintQuotedString]] for an explanation.
<<print out the elements of [[stage->u.prog.argv]], separated by spaces>>=
{
  int i;
  for(i = 0; stage->u.prog.argv[i] != NULL; i++)
    fprintf(fp, " %s", PrintQuotedString(stage->u.prog.argv[i]));
}
@ 
[[XPipe_free]] frees all memory allocated to the pipeline stages.
[[List_free]] takes care of freeing the list structure.  
<<common functions>>=
void XPipe_free(T* pipeline) {
  List_T next;
  assert (pipeline && *pipeline);

  for ( ; (*pipeline)->stages; (*pipeline)->stages = next) {
    next = (*pipeline)->stages->rest;
    FREE((*pipeline)->stages->first);
  }

  List_free(&(*pipeline)->stages);
  FREE (*pipeline);
}
@ 

\section{UNIX forking for pipeline execution}

The UNIX implementation of the [[Pipeline_run]] function and its
helper functions is described below.  [[<<xpipe-unx.c>>]] consists of
UNIX-specific headers, the struct definistions, and prototypes and
definitions for the UNIX versions of the functions that will execute
the pipeline.  The [[#include]]s are for Linux, and they may have to
be different for different kinds of Unix.

<<* ((fork))>>=
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <fmt.h>
#include "errors.h"
#include "sys.h"
#include "util.h"

<<private Unix prototypes>>
<<Unix run-program prototypes>>
<<private Unix functions>>
<<Unix functions>>
<<Unix run-program functions>>
@ 
The pipeline structure implemented here is a tree of UNIX processes
with leaf nodes corresponding to executable programs that are part of
the pipeline and internal nodes corresponding to subsets of the
pipeline.  For example, with a three stage pipeline, the first leaf
node would be the first pipe stage and the first internal node would
be the pipeline containing the next two pipe stages.  A bounded buffer
(UNIX pipe) is used at each internal node in order to pass information
between processes.  This buffer is created with the call to the
[[pipe]] function from [[unistd.h]].  The tree is created with calls
to [[forkPipelineFrom]] (creates an interior node corresponding to
pipeline to get information from) and [[forkStageTo]] (creates a leaf
node corresponding to a program to send information to and execute),
described below.

A few helper routines have been implemented to facilitate the implementation
of the [[XPipe_run]] function in Unix.  Two functions are
created that will wait for the specified child process or processes to
terminate, and then return their exit status.  It is a checked runtime
error for any other child process to terminate first.
<<Unix run-program prototypes>>=
static int waitfor(int pid);
<<private Unix prototypes>>=
static int waitfor2(int pid1, int pid2);
@ 
The next set of functions facilitate the manipulation of file descriptors.
The first two set standard input and standard output for a given stage
of the pipeline to allow that stage to receive information from
previous stages or to pass information on to later stages.  These
functions change standard input and output to the file descriptor
passed to them; it is a checked runtime error to pass 1 to
[[makeInput]] or 0 to [[makeOutput]].

The third function in this set simply closes the file descriptors
passed to it as a parameter.  Passing NULL into the [[pipefds]]
parameter results in a no-op.
<<Unix run-program prototypes>>=
static void makeInput(int fd);    /* make standard input a copy of fd */
static void makeOutput(int fd);   /* make standard output a copy of fd */
<<private Unix prototypes>>=
static void close_pair(int* pipefds);
@ 
The following functions fork the left and right halves of the tree and
set up the input/output file descriptors.

[[forkPipelineFrom(l, infd, pipefds)]] forks a process that will run the entire
pipeline [[l]], reading from file descriptor [[infd]], and writing to standard
output.

[[forkStageTo(prog, outfd, pipefds)]] executes the program as
specified, reading from standard input and writing to file
descriptor [[fd]].

Both functions return the pid of the process that is forked.

The [[pipefds]] parameter solves the problem of unbounded consumption of
open file descriptors.  If non-[[NULL]], it points to a pair of file
descriptors that should be closed \emph{in the child process}.  Moreover,
it is possible that the [[infd]] parameter or [[outfd]] parameter could be
equal to [[pipefds[0]]] or [[pipefds[1]]], so the functions have to be sure
not to close either of them prematurely.  It is an unchecked runtime error
for [[pipefds[0]]] or [[pipefds[1]]] to be 0 or 1.

<<private Unix prototypes>>=
static int forkPipelineFrom(List_T l, int infd, int outfd, int *pipefds);
static int forkStageTo(struct XPipe_Stage *prog, int outfd, int *pipefds);
@ 

\section{Definition of UNIX pipeline execution functions}

Given all this machinery, a pipeline is executed by forking a process, then
waiting for it.  The [[infd]] parameter is initially 0 ([[stdin]])
because we want the first stage of the pipeline to read from
[[stdin]]. The [[pipefds]] parameter is NULL because there are no file
descriptors to close at the time of the first call to [[forkPipelineFrom]].
<<Unix functions>>=
int XPipe_run(XPipe_T pipeline, FILE *infp, FILE *outfp) {
#if 0
  fprintf(stderr, "unix running "); XPipe_print(stderr, pipeline); fflush(stderr);
#endif
  return waitfor(
    forkPipelineFrom(pipeline->stages, fileno(infp), fileno(outfp), NULL));
}
@
For an internal node, we fork a child, which in turn forks its left
and right children and waits for them.  For the case in which this is
the last internal node, the [[outfd]] parameter in [[forkStageTo]] is
set to 1 ([[stdout]]) so that the last program may pass its results to
[[stdout]].
<<Unix functions>>=
static int forkPipelineFrom(List_T l, int infd, int outfd, int *surplus) {
  struct XPipe_T pl;
  pl.stages = l;
#if 0
  fprintf(stderr, "forking pipeline from "); XPipe_print(stderr, &pl); fflush(stderr);
#endif
  assert(l);
  if (l->rest) {
    int pid;
    if ((pid = fork()) == 0) {  /* fork stage & pipe, then wait */
      int fd[2], lpid, rpid;
      assert(pipe(fd) >= 0);
      makeInput(infd);  /* must do before closing surplus */
      close_pair(surplus);
      lpid = forkStageTo(l->first, fd[1], fd);
      rpid = forkPipelineFrom(l->rest, fd[0], outfd, fd);
      close_pair(fd);
      exit(waitfor2(lpid, rpid));
    } else 
      return pid;
  } else {
    makeInput(infd);
    return forkStageTo(l->first, outfd, surplus);
  }
}
@ 
The leaf nodes are the stages of the pipeline; processes to execute
these stages are called from within [[forkStageTo]].
<<Unix functions>>=
static int forkStageTo(struct XPipe_Stage *stage, int outfd, int *pipefds) {
  int pid;
  if ((pid = fork()) == 0) {       /* child process */
    makeOutput(outfd);
    close_pair(pipefds);
    <<execute [[stage]] and cause process to exit with suitable status>>
    return -1; /* prevents warning */
  } else {                           /* parent process */
    assert(pid > 0);
    return pid;
  }
}
@ 
<<execute [[stage]] and cause process to exit with suitable status>>=
switch (stage->tag) {
  case Prog:
    { struct XPipe_Program *prog = &stage->u.prog;
      char** new_argv;
      <<make [[new_argv]] be [[prog->path]] followed by [[argv]]>>
      if (Str_find(prog->path, 1, 0, Sys_dirsep))
	execve(prog->path, new_argv, prog->envp);
      else {
	<<lookup [[prog->path]] on PATH and execute>>
      }
      errormsg(Fatal, "Could not execute %s", prog->path);
      return -1; /* prevents warning */
    }
  case Fun:
    assert(stage->u.fun.f);
    exit(stage->u.fun.f(stage->u.fun.arg, stdin, stdout));
}
@ 
The program name is copied from [[prog->path]] onto the front of
[[prog->argv]] because [[execve]] requires the parameters to match
that format.  Redundancy is avoided in the [[XPipe_Stage]] structure,
so the copy is required here for the call to [[execve]].  A new list
of arguments is allocated, then [[prog->name]] and [[prog->argv]] are
copied onto it.  It is not necessary to free this memory because a
call to [[execve]] will follow immediately, resulting in completion of
the program by either successful execution or a Noweb fatal error.
<<make [[new_argv]] be [[prog->path]] followed by [[argv]]>>=
{
  int i, n;
  for (n = 0; prog->argv[n] != NULL; n++);  /* set n to length of argv */
  new_argv = ALLOC((n + 2) * sizeof(char*));
  new_argv[0] = (char *)prog->path;
  for (i = 1; i <= n; i++) {
    new_argv[i] = prog->argv[i - 1];
  }
  new_argv[n + 1] = NULL;
}
@ 
The program is looked up from each directory in the PATH, in order.
<<lookup [[prog->path]] on PATH and execute>>=
{ char *pathstring = getenv("PATH");
  List_T path;
  if (!pathstring)
    errormsg(Fatal, "%s: cannot run external pipeline "
             "with no PATH environment variable", progname);
  path = pathsplit(pathstring);
  for ( ; path; path = path->rest) {
    char* pathname = Fmt_string("%s%s%s", path->first, Sys_dirsep, prog->path);
    execve(pathname, new_argv, prog->envp);
  };
} 
@ 
The first two helper functions, [[waitfor]] and [[waitfor2]], return the
exit status of a child process or a pair of child processes, respectively,
that function is to wait for.  If an unexpected process terminates before
one of the awaited processes, then the functions return an error and abort.
Note that this might happen if, for example, another process forks a
child, doesn't wait for it, and then execs Noweb.%
\footnote{Thank you, Russ Cox.}
<<Unix run-program functions>>=
static int waitfor(int pid) {
  int status, childpid;
#if 0
  fprintf(stderr, "Waiting for pid %d...\n", pid);
#endif
  childpid = wait(&status);
  if (childpid != pid)
    errormsg(Impossible, "Fatal error: waiting for process %d to finish; "
             "found process %d.\n\tCould you have forked a child, "
             "then exec'ed no without waiting?\n", pid, childpid);
#if 0
  fprintf(stderr, "Waiting for process %d got status %d\n", pid, WEXITSTATUS(status));
#endif
  return WEXITSTATUS(status);
}
<<private Unix functions>>=
static int waitfor2(int pid1, int pid2) {
  int status;
  int pid;
#if 0
  fprintf(stderr, "Waiting for pid %d or pid %d...\n", pid1, pid2);
#endif
  pid = wait(&status);
  if ((pid != pid1) && (pid != pid2))
    errormsg(Impossible, "Fatal error: waiting for process %d or %d to finish; "
             "found process %d.\n\tCould you have forked a child, "
             "then exec'ed no without waiting?\n", pid1, pid2, pid);
#if 0
  fprintf(stderr, "Waiting for process %d got status %d\n", pid, WEXITSTATUS(status));
#endif
  return WEXITSTATUS(status) | waitfor(pid == pid1 ? pid2 : pid1);
}
@
[[makeInput]] and [[makeOutput]] return immediately if the parameters passed
to them already equal [[stdin]] and [[stdout]], respectively.  Otherwise,
they return an error if an attempt is made to turn [[stdout]] into [[stdin]]
or vice-versa.
<<Unix run-program functions>>=
static void makeInput(int fd) {
  if (fd == 0) return;
  assert(fd != 1);
  assert(dup2(fd, 0) == 0);
  return;
}

static void makeOutput(int fd) {
  if (fd == 1) return;
  assert(fd != 0);
  assert(dup2(fd, 1) == 1);
  return;
}
@ 
[[close_pair]] simply close the file descriptors passed to it and
assert the success of the call to [[close]].
<<Unix functions>>=
static void close_pair(int *surplus) {
  if (surplus) {
    int n;
    n = close(surplus[0]); assert(n == 0);
    n = close(surplus[1]); assert(n == 0);
  }
}
@ 
\section{Pipeline execution using temporary files}

Useful on systems that can't fork.
Also useful for debugging!
<<* ((spawn))>>=
#include "util.h"
#include "errors.h"
#include "nwprocess.h"
#include <fmt.h>

<<private temporary-file prototypes>>
#if defined(WIN32)
<<Windows run-program prototypes>>
#else
<<Unix run-program prototypes>>
#endif

<<temporary-file functions>>
#if defined(WIN32)
<<Windows run-program functions>>
#else
<<Unix run-program functions>>
#endif
@ 
We walk a list of stages with input and output files given.
<<private temporary-file prototypes>>=
static int do_stage (XPipe_Stage stage, FILE *in, FILE *out);
static int do_stages(List_T stages, FILE *in, FILE *out);
<<temporary-file functions>>=
int XPipe_run(XPipe_T pipeline, FILE *in, FILE *out) {
#if 0
  fprintf(stderr, "tmp running "); XPipe_print(stderr, pipeline); putc('\n', stderr); fflush(stderr);
#endif
  return do_stages(pipeline->stages, in, out);
}
@
<<temporary-file functions>>=
static int do_stages(List_T l, FILE *in, FILE *out) {
  int n;
  assert(l);
  if (l->rest) {
    FILE *tmp;
    <<set [[tmp]] to a suitable temporary file>>
    n = do_stage(l->first, in, tmp);   
    if (n == 0) {
      rewind(tmp);
      fflush(tmp);
      n |= do_stages(l->rest, tmp, out);
    }
    <<recover resources associated with [[tmp]]>>
    return n;
  } else {
    return do_stage(l->first, in, out);
  }
}
@ 
The leaf nodes are the stages of the pipeline; processes to execute
these stages are called from within [[forkStageTo]].
<<temporary-file functions>>=
static int do_stage(struct XPipe_Stage *stage, FILE *in, FILE *out) {
  switch (stage->tag) {
    case Fun:
      assert(stage->u.fun.f);
#if 0
fprintf(stderr, "running function %s in xpipe\n", stage->u.fun.name);
#endif
      return stage->u.fun.f(stage->u.fun.arg, in, out);
    case Prog:
#if 0
fprintf(stderr, "running program %s in xpipe\n", stage->u.prog.path);
#endif
      return run_program(&stage->u.prog, in, out);
    default:
      assert(0); return -1;
  }
}
@ 
<<Windows run-program prototypes>>=
void PrintError(LPTSTR lpszPreface);
@
<<Windows run-program functions>>=
void PrintError(LPTSTR lpszPreface) {
  DWORD dw = GetLastError();

  LPVOID lpMsgBuf;
  FormatMessage(
    FORMAT_MESSAGE_ALLOCATE_BUFFER |
    FORMAT_MESSAGE_FROM_SYSTEM |
    FORMAT_MESSAGE_IGNORE_INSERTS,
    NULL,
    dw,
    MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
    (LPTSTR) &lpMsgBuf,
    0, NULL );

  printf("%s: error %d (%s)\n", lpszPreface, dw, lpMsgBuf);

  LocalFree(lpMsgBuf);
}
@
<<private temporary-file prototypes>>=
static int run_program(struct XPipe_Program *prog, FILE *in, FILE *out);
<<Unix run-program functions>>=
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include "sys.h"

static int run_program(struct XPipe_Program *prog, FILE *in, FILE *out) {
  char** new_argv;
  int pid;
  if ((pid = fork()) == 0) {
    <<make [[new_argv]] be [[prog->path]] followed by [[argv]]>>
    makeInput (fileno(in ));
    makeOutput(fileno(out));
    if (Str_find(prog->path, 1, 0, Sys_dirsep))
      execve(prog->path, new_argv, prog->envp);
    else {
      <<lookup [[prog->path]] on PATH and execute>>
    }
    errormsg(Fatal, "Could not execute %s", prog->path);
    exit(EXIT_FAILURE);
    return -1; /* prevents warning */
  } else {
    return waitfor(pid);
  }
}
@ 
<<Windows run-program functions>>=
static int run_program(struct XPipe_Program *prog, FILE *in, FILE *out) {
  STARTUPINFO si;
  ZeroMemory(&si, sizeof(si));
  si.cb = sizeof(si);
  si.dwFlags = STARTF_USESTDHANDLES;
  si.hStdInput = (HANDLE)_get_osfhandle( _fileno(in) );
  si.hStdOutput = (HANDLE)_get_osfhandle( _fileno(out) );
  si.hStdError = (HANDLE)_get_osfhandle( _fileno(stderr) );

  PROCESS_INFORMATION pi;
  ZeroMemory(&pi, sizeof(pi));

  SECURITY_ATTRIBUTES sa;
  ZeroMemory(&sa, sizeof(sa));
  sa.nLength = sizeof(sa);
  sa.lpSecurityDescriptor = NULL;
  sa.bInheritHandle = TRUE;

  int i, j, m, n, o;
  <<Copy the path and argv into a new argv>>
  <<Copy the envp into a new envp>>

  int result = 0;

  if(!CreateProcess(NULL, new_argv, NULL, NULL, TRUE, 0, new_envp, NULL, &si, &pi)) {
    PrintError(TEXT("Creating process"));
    result = -1;
  }

  WaitForSingleObject( pi.hProcess, INFINITE );

  _close(_fileno(in));
  _close(_fileno(out));
  _close(_fileno(stderr));
  if(result!=0)
    exit(EXIT_FAILURE);
  return result;
}
@
The CreateProcess function allows for both a command string and an argv string.

If you use the command string, then all path searching is not performed and
the format of the directory used to locate a command can be version specific.
These issues can lead to results that will suprise general users of Noweb.

In order to enable the expected path searching and directory nomenclature,
you simply prepend the command to the argv string and leave the command
string as null.

So we begin by determining the size of the command string.
<<Copy the path and argv into a new argv>>=
for (o = 0; prog->path[o] != '\0'; o++);  /* set o to length of path */
@
Determining the length needed for the argv string is a little bit more complex.
The argv we receive is an array of strings, but CreateProcess requires a
single string.

We do this by counting the number of strings and then totaling the size of
each string.

Then we can take advantage of the fact that the number strings is equal to the
number of spaces we need.
<<Copy the path and argv into a new argv>>=
for (m = 0; prog->argv[m] != NULL; m++);  /* set m to length of argv */
n = 0;
for (i = 0; i < m; i++)
{
  j = 0;
  for(j = 0; prog->argv[i][j] != '\0'; j++, n++); /* add length of argv[i] to n */    
}
@
Now that we have all of that done, let's make a string that's big enough to hold
the command string, space, each of the strings, a space after each (though the
last space is replaced by the null character).
<<Copy the path and argv into a new argv>>=
char * new_argv = ALLOC((o + 1 + m + n) * sizeof(char));
@
Finally, we just copy them in sequence with spaces between, remembering to change
the last space into the null character.
<<Copy the path and argv into a new argv>>=
n = 0;
for (i = 0; i < o; i++)
{
  new_argv[n++] = prog->path[i];
}
new_argv[n++] = ' ';
for (i = 0; i < m; i++)
{
  j = 0;
  while(prog->argv[i][j] != '\0') {
    new_argv[n++] = prog->argv[i][j++];
  }
  new_argv[n++] = ' ';
}
new_argv[n - 1] = '\0';
@
The CreateProcess function allows for passing an environment, but the format
is very different from what we receive.

The envp we receive is an array of strings, but CreateProcess requires a
single string with null characters between environment settings and a final
null character to mark that the last string has been read.

This uses the same ideas as found in [[<<Copy the path and argv into a new argv>>]],
with one exception.

Instead of replacing the last placed character with the null character, we need to
append an additional null character.
<<Copy the envp into a new envp>>=
for(m = 0; prog->envp[m] != NULL; m++); /* set m to length of envp */
n = 0;
for (i = 0; i < m; i++)
{
  j = 0;
  for(j = 0; prog->envp[i][j] != '\0'; j++, n++); /* add length of envp[i] to n */
}
char * new_envp = ALLOC((m + n + 1) * sizeof(char));
n = 0;
for(i = 0; i < m; i ++)
{
  j = 0;
  while(prog->envp[i][j] != '\0') {
    new_envp[n++] = prog->envp[i][j++];
  }
  new_envp[n++] = '\0';
}
new_envp[n] = '\0';
@ 
Temporary files are supported using [[tmpfile]], which is ISO~C.
N.B.~The file is automatically deleted on closure.
<<set [[tmp]] to a suitable temporary file>>=
tmp = tmpfile();
assert(tmp);
<<recover resources associated with [[tmp]]>>=
(void) fclose(tmp);
@ 
\subsection{Possible help for Windows}

Got this useful code from Patrick McPhee:
<<windows code to start  process with pipes>>=
int start_command(const char * const cmd, fdesc_t * fd)
{
   STARTUPINFO si;
   PROCESS_INFORMATION pi;
   SECURITY_ATTRIBUTES sa;
   HANDLE inh, outh, errh;
   int rc = 0;

   sa.nLength = sizeof(sa);
   sa.lpSecurityDescriptor = NULL;
   sa.bInheritHandle = TRUE;
   
   si.cb = sizeof(sinfo);
   si.dwFlags = STARTF_USESTDHANDLES ;
   if (!CreatePipe(&si.hStdInput, &inh, &sa, (DWORD)0) ||
       !CreatePipe(&outh, &si.hStdOutput, &sa, (DWORD)0) ||
       !CreatePipe(&errh, &si.hStdError, &sa, (DWORD)0))
      return 0;

   if (!CreateProcess(NULL, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi)) {
      CloseHandle(&inh);
      CloseHandle(&outh);
      CloseHandle(&errh);
      rc = 0;
   }
   else {
      fd->inh = fdopen(inh, "wb");
      fd->outh = fdopen(outh, "rb");
      fd->errh = fdopen(errh, "rb");
      rc = 1;
   }
      
   CloseHandle(&si.hStdInput);
   CloseHandle(&si.hStdOutput);
   CloseHandle(&si.hStdError);
       
   return rc;
}
