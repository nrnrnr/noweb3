\input{nocondmac}
\section{Weaving a {\tt noweb} file into a \TeX file}
The copyright applies both to the {\tt noweb} source and to the
generated shell script.
<<copyright notice>>=
-- Copyright 1991-1998 by Norman Ramsey.  All rights reserved.
-- See file COPYRIGHT for more information.
-- $Id$
@
I thought it would be nice to put all the built-in stuff in a table.
<<renaming of builtins>>=
P = MPipe
@
I'm assuming we defined a [[concat]] fallback that works on lists.
<<*>>=
<<copyright notice>>
<<renaming of builtins>>
<<initialization>>
<<scan options and arguments>>
if nil and verbose then -- no longer interesting
  local oldoutput = writetox(stderr)
  write("backopts = "); show(backopts); write("\n")
  write("noindex = "); show(noindex); write("\n")
  write("delay = "); show(delay); write("\n")
  write("shortxref = "); show(shortxref); write("\n")
  writetox(oldoutput)
end
---- function foo (a, b)
----   if type(b) == "table" then b = nil end
----   return Stages.toascii(a, b)
---- end
---- backend = foo
backend  = P.sink(backend, backopts .. noindex .. delay .. shortxref)
<<using [[markup]] and [[wrapper]], make [[src]] the source>>
pipeline = src .. filters .. backend
if verbose then
  oldoutput=writetox(stderr)
  P.print(pipeline)
  write("\n")
  writetox(oldoutput)
end
if System.getenv("PATH") then
  System.putenv("PATH="..LIB..":"..System.getenv("PATH"))
end
exit(P.run(pipeline))
@
<<initialization>>=
-- default is to use internal filters
backend = Stages.totex
markup = Stages.markup
Defaults = { }
Defaults.noidx = Stages.noidx
Defaults.tohtml = Stages.tohtml
Defaults.finduses = Stages.finduses

function externalDefaults ()
  backend = libFile("totex")
  markup = libFile("markup")
  Defaults.noidx = libFile("noidx")
  Defaults.tohtml = libFile("tohtml")
  Defaults.finduses = libFile("finduses")
end
  
backopts = List.new {}
wrapper = nil
delay = List.new {}
args = List.new {}
markopts = List.new {}
noweboptions = nil
autodefs = nil
verbose = false
shortxref = false
-- noquote = List.new {"-noquote"}
noquote = List.new {}  -- with hyperref, uses in quoted code are helpful
docanchor= List.new {}
indexdatabase = List.new {}
noindex="-noindex"
filters = P.identityFilter
@
I make two passes over the arguments so as not to require that options
be given in a certain order.
<<scan options and arguments>>=
i = 1
while i <= List.length(argv) do
  if argv[i] == "-externaldefaults" then externalDefaults()
  elseif argv[i] == "-internaldefaults" then -- do nothing
  elseif argv[i] == "-e" then i = i + 1; dostring(argv[i])
  <<first pass {\tt noweave} options>>
  elseif argv[i] == "-"  then List.put(args, "-")
  elseif matchpattern(argv[i], "-*") then errormsg {"Unrecognized option ", argv[i]}
            <<show usage>>
            exit(1)
  elseif matchpattern(argv[i], "*")  then List.put(args, argv[i])
  end
  i = i + 1
end
@ \iffalse
<<noweave man page option table>>=
.TP
.B \-externaldefaults
Use external filters wherever possible, instead of internal ones.
.TP
.BI \-e " string"
Treat
.I string
as Lua source code and evaluate it.
Possibly dangerous.
@ \fi
<<scan options and arguments>>=
<<insist first-pass options are self-consistent>>
if wrapper == nil then wrapper = "latex" end
i = 1
while i <= List.length(argv) do
  if argv[i] == nil then noweb_error("argv[i] was nil!")
    <<second pass {\tt noweave} options>>
  end
  i = i + 1
end
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-latex" then      if wrapper ~= "none" then wrapper = "latex" end
elseif argv[i] == "-tex" then        wrapper="tex"
elseif argv[i] == "-html" then       if wrapper ~= "none" then wrapper = "html"  end
                   backopts = List.new { "-localindex" }
                   <<common HTML settings>>
elseif argv[i] == "-latex+html" then  if wrapper ~= "none" then wrapper = "latex" end
                   backopts = List.new { "-localindex", "-raw" }
                   <<common HTML settings>>
elseif argv[i] == "-ascii" then      wrapper= "none"; backend = libFile("toascii")
elseif argv[i] == "-troff" then      wrapper="mm";    backend = libFile("toroff")
elseif argv[i] == "-n" then          wrapper="none"
elseif argv[i] == "-backend" then    backend=argv[i+1]; i = i+1
elseif argv[i] == "-markup" then     markup =argv[i+1]; i = i+1

<<common HTML settings>>=
backend = Defaults.tohtml
noquote = List.new {}
docanchor = List.new {"-docanchor", "10"}
@
<<option printout for usage>>=
errormsg("-latex		Emit LaTeX with headers and trailers (default).")
errormsg("-tex			Emit plain TeX with headers and trailers.")
errormsg("-html			Emit HTML with headers and trailers.")
errormsg("-latex+html		Assume LaTeX in documentation, but use HTML in code.")
-- errormsg("-ascii		Emit ASCII.")
errormsg("-troff		Emit troff (unsupported).")
errormsg("-n			Don't use any header or trailer.")
errormsg("-markup frontend	Parse input with frontend (e.g., numarkup).")
errormsg("-backend program	Generate final output with backend (e.g., tohtml).")
@ \iffalse
<<noweave man page option table>>=
.TP
.B \-latex
Emit LaTeX, including wrapper in
.B article
style with the
.B noweb
package and page style. (Default)
.TP
.B \-tex
Emit plain TeX, including wrapper with
.B nwmac
macros.
.TP
.B \-html
Emit HTML, using HTML wrapper.
The output is uninteresting without
.B \-index
or
.BR \-x .
The tags
.B <nowebchunks>
and
.B <nowebindex> ,
on lines by themselves,
produce a list of chunks and an index of identifiers, respectively.
If these tags are not present, the list and index are placed at the end of the file.
.TP
.B \-latex+html
Assume documentation chunks are LaTeX, but generate HTML for code chunks,
suitably marked so conversion with
.IR latex2html (1)
yields reasonable output.
A LaTeX wrapper is implied, but can be turned off with
.B \-n .
.I "Use of this option is"
.BR deprecated ;
use
.B \-html
with
.B "\-filter l2h"
instead.
.TP
.B \-troff
Emit
.IR troff (1)
markup (with no wrapper).
The result should be processed with
.IR noroff (1).
Bug reports for
.B \-troff
to Phil Bewig
.BR <pbewig@netcom.com> .
<<bogus noweave man page option table>>=
.TP
.B \-ascii
Emit ASCII (with no wrapper).
Bug reports for
.B \-ascii
to Phil Bewig
.BR <pbewig@netcom.com> .
<<noweave man page option table>>=
.TP
.B \-n
Don't use any wrapper (header or trailer).
This option is useful when
.I noweave 's
output will be a part of a larger document.
See also
.BR \-delay .
.TP
.BI \-markup " frontend"
Parse input with
.I frontend
(e.g.,
.IR  numarkup ).
.TP
.BI \-backend " program"
Generate final output with
.I backend
(e.g.,
.IR tohtml ).
@ \fi
A common bug seems to be using both [[-x]] and [[-index]] on the same
command line, so I complain about it.
<<insist first-pass options are self-consistent>>=
if using_xref and using_index then
  error("noweave: you may not use -x with -index or -indexfrom (drop the -x)")
  exit(1)
end
<<initialization>>=
using_index=nil; using_xref=nil
@
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-filter" or argv[i] == "-ifilter"  then i = i+1
elseif argv[i] == "-x" then                           using_xref=1
elseif argv[i] == "-index" then            noindex=nil ; using_index=1
elseif argv[i] == "-indexfrom" then i=i+1; noindex=nil ; using_index=1
elseif argv[i] == "-indexdb" then   i = i + 1; indexdatabase = indexdatabase .. List.fromstring(argv[i])
<<second pass {\tt noweave} options>>=
elseif argv[i] == "-filter" then
    filters = filters .. MD.stringFilter(argv[i+1])
    i = i + 1
elseif argv[i] == "-ifilter" then
    dostring("if 1 then local f, arg = " .. argv[i+1] ..
             "; filters = filters .. MPipe.filter(f, arg) end")
    i = i + 1
elseif argv[i] == "-x" then
    filters = filters .. P.filter(Defaults.noidx, docanchor .. delay .. indexdatabase)
elseif argv[i] == "-index" then
  filters = filters .. P.filter(Defaults.finduses, noquote)
  filters = filters .. P.filter(Defaults.noidx, docanchor .. delay .. indexdatabase)
elseif argv[i] == "-indexfrom" then
  filters = filters .. P.filter(Defaults.finduses, noquote .. {argv[i+1]})
  filters = filters .. P.filter(Defaults.noidx, docanchor .. delay .. indexdatabase)
  i = i + 1
<<option printout for usage>>=
errormsg("-x			Use the default cross-referencer (needs LaTeX or HTML).")
errormsg("-index		Create index using identifiers defined in input files.")
errormsg("-indexfrom defs	Create index of identifers listed in file defs.")
errormsg("-indexdb database	Add 'database' to list of files searched to find chunk definitions.")
errormsg("-filter cmd		Filter through 'cmd' before weaving; cmd could prettyprint")
errormsg("			or perform other functions.")
errormsg("-ifilter filt		Filter through internal filter 'filt' before weaving.")
@ \iffalse
<<noweave man page indexing options>>=
.TP
.B \-x
For
.IR LaTeX ,
add a page number to each chunk name identifying the location of that
chunk's definition, and emit cross-reference information relating definitions and uses.
For
.IR HTML ,
create hypertext links between uses and definitions of chunks.
When
.B "noweave \-x"
is used with
.I LaTeX,
the control sequence
.B "\enowebchunks"
expands to a sorted list of all code chunks.
.TP
.B \-index
Build cross-reference information (or hypertext links) for identifiers defined by
.br
.BI "@ %def" " identifiers"
.br
Definitions are those found in input files.
Requires
.I LaTeX
or
.I HTML.
.B \-index
implies
.BR \-x ;
including both will generate strange-looking output.
.I noweave
does not generate
cross-references to identifiers that appear in quoted code (\fB@[[\fP...\fB@]]\fP),
but it does generate hypertext links.
When
.B "noweave \-index"
is used with
.IR LaTeX ,
the control sequence
.B "\enowebindex"
expands to an index of identifiers.
.TP
.BI \-indexfrom " index"
Like
.BR \-index ,
but the identifiers to be indexed are taken from file
.IR index .
See
.IR noindex (1).
.TB
.BR \-indexdb " database"
Add
.I database
to the list of files searched to find chunk definitions.
This facilitates keeping a single web in multiple source files.
<<noweave man page option table>>=
.TP
.B \-filter \fIcmd\fP
Filters the
.I noweb
source through
.I cmd
after converting it to tool form and before converting to
.IR TeX .
.I noweave
looks for
.I cmd
first on the user's
.BR PATH ,
then in
.BR |LIBDIR| .
Such filters
can be used to add features to
.IR noweave ;
for an example, see
.BR |LIBDIR|/noxref.krom .
.I noweave
supports up to four filters; one can get more by shell trickery,
for example, \fB\-filter "icon.filter | noidx"\fP.
The
.BR \-autodefs ,
.BR \-x ,
.BR \-index ,
and
.B \-indexfrom
options are implemented as filters.
Filters are executed with the shell's
.B eval
command, so
.I cmd
should be quoted accordingly.
.TP
.BI \-ifilter " filt"
Filters the noweb file through the internal filter
.I filt
(presumably written in Lua)
before converting it to
.IR TeX .
There is no limit on the number of internal filters that may be used.
<<description of -markup option>>
@ \fi
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-autodefs" then
    f = libFile("autodefs." .. argv[i+1])
    if MD.isExecutable(f) then
      filters = filters .. P.filter(f, {})
    else
      errormsg {argv0, ": don't know how to find definitions for '", argv[i+1], "'"}
      exit(1)
    end
    i = i + 1
elseif argv[i] == "-showautodefs" then <<print all legal [[-autodefs]] or complain>>; exit (1)
<<option printout for usage>>=
errormsg("-autodefs lang	Source is in language 'lang'; find definitions automatically.")
errormsg("-showautodefs		List languages that can be used with -autodefs.")
@ \iffalse
<<noweave man page indexing options>>=
.TP
.BR \-autodefs " lang"
Discover identifier definitions automatically.
Code in chunks must be in language
.IR lang .
Permissible
.IR lang\^ s
vary but may include
.B tex
or
.BR icon .
Useless without
.BR \-index ,
which it must precede.
.TP
.B \-showautodefs
Show values of
.I lang
usable with
.BR \-autodefs .
@ \fi
<<print all legal [[-autodefs]] or complain>>=
foundautodefs = nil
l = System.globFile(libFile("autodefs.*"))
initial = strlen(libFile("autodefs."))
while List.length(l) > 0 do
  f = List.get(l)
  if System.isExecutable(f) then
    write("This noweave supports -autodefs ", strsub(f, 1+initial))
    foundautodefs=f
  end
end
if not foundautodefs then
  write("This noweave does not support -autodefs")
end
@
Here's an embarrassing hack --- if we spot \verb+-option shortxref+
or \verb+-option longxref+ on the
command line, we pass something suitable to the back end, in case we're doing
HTML.
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-option" then newopt=argv[i+1]; i = i + 1
         if newopt == "shortxref" then shortxref = List.new {"-shortxref"} end
         if newopt == "longxref"  then shortxref = List.new {"-longxref"} end
	 if noweboptions then
	   noweboptions = noweboptions .. "," .. newopt
	 else
	   noweboptions = newopt
	 end
<<option printout for usage>>=
errormsg("-option opt		Add \\noweboptions{opt} to header (LaTeX only).")
@ \iffalse
<<noweave man page option table>>=
.TP
.BI \-option " opt"
Adds
.BI \enoweboptions{ opt\^ }
to the
.I LaTeX
header.
See
.IR nowebstyle (1)
for values of
.IR opt .
Normally useful only with the
.B \-latex
option, but
.B "\-option longxref"
works black magic with
.BR \-html .
@ \fi
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-delay" then   delay={"-delay"} ; wrapper="none"
<<option printout for usage>>=
errormsg("-delay		Delay markup until after first documentation chunk.")
@ \iffalse
<<noweave man page option table>>=
.TP
.B \-delay
By default,
.I noweave
puts file-name and other information into the output before the first chunk
of the program.
.B \-delay
delays that information until after the first documentation chunk, making
it act a little bit like the
.I WEB
``limbo.''
The option is typically used to enable a user to put a specialized
.I LaTeX
.B "\edocumentclass"
command and other preamble material in the first documentation chunk.
This option also forces trailing cross-referencing information to be emitted
just before the final chunk, instead of at the end of the document;
the final chunk is expected to contain
.B "\eend{document}."
The
.B \-delay
option implies the
.B \-n
option.
@ \fi
<<first pass {\tt noweave} options>>=
elseif matchpattern(argv[i], "-t*") then List.put(markopts, argv[i])
<<option printout for usage>>=
errormsg("-tk		Expand tab stops every k columns.")
errormsg("-t		Copy tabs to the output.")
@ \iffalse
<<noweave man page option table>>=
.TP
.BI \-t k
Expand tabs with stops every
.I k
columns.
(Default is to expand every 8 columns.)
.TP
.B \-t
Copy tabs to the output.
@ \fi
<<first pass {\tt noweave} options>>=
elseif argv[i] == "-v" then errormsg("RCS version name $Name:  $")
<<first pass {\tt noweave} options)>>=
    errormsg("RCS id $Id$")
    verbose=1
<<option printout for usage>>=
errormsg("-v		Print pipeline and RCS info on standard error.")
@ \iffalse
<<noweave man page option table>>=
.TP
.B \-v
Print the pipeline and RCS info on standard error.
@ \fi
\iffalse
<<man page: WEAVING section>>=
Output from
.I noweave
can
be used in
.I TeX
documents that
.BR "\einput nwmac" ,
in
.I LaTeX
documents that use the
.B noweb
package (see
.IR nowebstyle (1)),
and in HTML documents to be browsed with
.IR netscape (1)
or
Internet Explorer.
.I noweave
treats code chunks somewhat like
.I LaTeX
list environments.
If the ``\fB@\ \fP'' that terminates a code chunk is followed immediately by text,
that text follows the code chunk without a paragraph break.
If the rest of the line is blank,
.I noweave
puts
.I TeX
into ``vertical mode,'' and later text starts a fresh, indented paragraph.
.PP
No page breaks occur in the middle of code chunks unless necessary to avoid
an overfull vbox.
The documentation chunk immediately preceding a code chunk appears on
the same page as that code chunk unless doing so would violate the previous rule.
.PP
.I noweave
inserts no extra newlines in its
.I TeX
output, so the line numbers given
in
.I TeX
error messages are the same as those in the input file.
.PP
.I noweave
has options that dictate choice of formatter
and that support different formatting idioms and tools.
Basic options are described here; options related to index
and cross-reference information are described in the
INDEXING AND CROSS-REFERENCE section.
<<noweave man page option table>>
@
<<man page: INDEXING AND CROSS-REFERENCE section>>=

@ \fi
<<show usage>>=
errormsg{"Usage: ", argv0, " [options] [files]"}
errormsg("Options recognized are:")
<<option printout for usage>>
@
With an internal source, it's easy to supply headers and trailers.
<<using [[markup]] and [[wrapper]], make [[src]] the source>>=
function internal_src (buf, t)
  local rc
  if t.wrapper == "latex" then NWB.put(buf, NW_HEADER, wrapper .. " " .. noweboptions)
  elseif t.wrapper == "none"  then
  else NWB.put(buf, NW_HEADER, wrapper .. " " .. List.tostring(args))
  end
  rc = t.fun(buf, t.arg)
  if t.wrapper == "none"  then
  else NWB.put(buf, NW_TRAILER, wrapper)
  end
  return rc
end
@
With an external source, much harder --- I need an explicit [[fromascii]].
<<using [[markup]] and [[wrapper]], make [[src]] the source>>=
function external_src(t)
  if t.wrapper == "latex" then write("@header ", wrapper .. " " .. noweboptions, '\n')
  elseif t.wrapper == "none" then
  else write("@header ", wrapper .. " " .. List.tostring(args), '\n')
     --- where is args coming from?
  end
  System.fflush()
  rc = XPipe.run(XPipe.stage(t.fun, t.arg))  -- probably wrong
  System.fflush()
  if t.wrapper == "none"  then
  else write("@trailer ", wrapper, '\n')
  end
  return rc
end

function external_src_wrap(t)
  if t.wrapper == "latex" then NWB.put(t.buf, NW_HEADER, t.wrapper .. " " .. noweboptions)
  elseif  t.wrapper == "none"  then
  else NWB.put(t.buf, NW_HEADER, t.wrapper .. " " .. List.tostring(args))
     --- where is args coming from?
  end
  local rc = Stages.fromascii(t.buf)
  if t.wrapper == "none"  then
  else NWB.put(t.buf, NW_TRAILER, t.wrapper)
  end
  return rc
end

-- this looks wrong
if type(markup) == "string" then
  s = P.xsource(external_src, {wrapper=wrapper, fun=markup, arg=markopts .. args},
                "<external " .. markup .. ' ' .. List.tostring(markopts..args) .. ">")
else
  s = P.source(internal_src, {wrapper=wrapper, fun=markup, arg=markopts .. args})
end

src = s
-- src = P.source(Stages.markup, markopts .. args)
@
<<initialization>>=
if not Noweave then Noweave = { } end
function Noweave.concatfallback (x, y)
  if type(x) .. "," .. type(y) == "string,nil" then return x
  elseif type(x) .. "," .. type(y) == "nil,string" then return y
  else return Noweave.oldconcatfallback(x, y)
  end
end
Noweave.oldconcatfallback = setfallback("concat", Noweave.concatfallback)
