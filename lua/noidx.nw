% -*- mode: Noweb; noweb-code-mode: fundamental-mode -*-

\documentclass{article}
\usepackage{noweb}
\pagestyle{noweb}\noweboptions{shortxref}
\begin{document}
Missing ``{\tt @xref tag} {\it label tag},'' where {\it label} is the name of 
a label and {\it tag} is a chunk number, page number, sub-page number, or
other identifying mark.



@
\section{Cross-reference and index support}
<<*>>=
Noidx = { }

<<hackers: subsubsections for internal filters>>=
\subsubsection{The filter \texttt{Stages.noidx}}

\texttt{Stages.noidx} computes all the index and cross-reference information
represented by the \nkw{INDEX} and \nkw{XREF} keys.
Its arbitrary argument is a list of strings denoting options.

The {\tt -delay}  option delays heading material until
after the first chunk, and brings trailing material before the last
chunk.
In particular, it causes
the list of chunks and the index of identifiers to be emitted before
the last chunk.

The {\tt -docanchor $n$} option sets the anchor for a code chunk.
\begin{enumerate}
\item
If a documentation chunk precedes the code chunk and is $n$ or more lines long,
 put the anchor $n$~lines from the end of that documentation chunk.
\item
If a documentation chunk precedes the code chunk and is fewer than $n$~lines long, 
put the anchor at the beginning of that documentation chunk.
\item
If no documentation chunk precedes the code chunk, 
put the anchor at the beginning of
the code chunk, just as if {\tt -docanchor} had not been used.
\end{enumerate}
This option is used to create anchors suitable for the HTML back end.
Its effect is to make hyperlinks jump to the documentation preceding a code chunk 
rather than to the code chunk itself.

The \texttt{-dbout \emph{file}} option causes the filter to emit, on
\emph{file}, information about the first and last definitions of
chunks in this file.
(What about uses?)

The \texttt{-dbin file} option notes that chunks may be linked in from
a preceding or succeeding file, as determined by
whether \texttt{-dbin} precedes or succeeds \texttt{-dbout}.
<<*>>=
function Stages.noidx(sourcebuf, sinkbuf, args)
--global lines		# all the input lines
  local delay		-- non-null if markup should be delayed past the first chunk 
--global anchordist	# max distance before code chunk to place defining @xref label

  local theseuses, thesedefns, thischunk
  local dboutfile, defndb -- first and last defns of each chunk

  Noidx.prevdb = nil  -- definitions preceding this file
  Noidx.nextdb = nil  -- definitions following this file
  Noidx.usedb  = nil  -- uses preceding and following this file
  <<initialization>>
  delay = nil
  <<swallow [[args]]>>
  Noidx.prevdb = Noidx.prevdb or { }
  Noidx.nextdb = Noidx.nextdb or { }
  Noidx.usedb  = Noidx.usedb  or { }
  local prevdb = Noidx.prevdb
  local nextdb = Noidx.nextdb
  local usedb  = Noidx.usedb

  r = NWB.reader(sourcebuf)
  local newbuf = NWB.new()
  key, arg = NWB.read(r)
  while key do
    if key == nil then noweb_error("key was nil!")
    <<case for [[crc_prefix]]>>
    <<cases for pass 1>>
    end
    NWB.put(newbuf, key, arg)
    key, arg = NWB.read(r)
  end

  r = NWB.reader(newbuf)
  key, arg = NWB.read(r)
  while key do
--    NWB.put(sinkbuf, 'the_crc_prefix', Noidx.crc_prefix)
--    NWB.put(sinkbuf, 'active_prefix', Noidx.active_crc_prefix)
    if key == nil then noweb_error("key was nil!")
    <<case for [[crc_prefix]]>>
    <<cases for pass 2>>
    end
    key, arg = NWB.read(r)
  end

  <<write trailers if not already written>>
  <<write output database>>
end
@
<<swallow [[args]]>>=
while List.length(args) > 0 do
  local a = List.get(args) 
  if a == "-delay" then delay = 1
  elseif a == "-docanchor" then anchordist = tonumber(List.get(args)) or anchordist
  elseif a == "-dbout" then dboutfile = List.get(args);
                if not Noidx.prevdb then
                  Noidx.prevdb = Noidx.nextdb; Noidx.nextdb = nil
                end
  elseif a == "-dbin" then Noidx.nextdb = Noidx.nextdb or { }
                Noidx.usedb = Noidx.usedb or { }
                dofile(List.get(args))
  else noweb_error("unknown argument ", a)
  end
end
@
<<*>>=
function Noidx.add_db_defns(chunk, first, last)
  local db = Noidx.nextdb
  local mine = db[chunk]
  if mine then
    mine.last = last
  else
    db[chunk] = { first = first, last = last }
  end
end
<<*>>=
function Noidx.add_db_use(chunk, use)
  local db = Noidx.usedb
  local mine = db[chunk]
  if mine then
    List.put(mine, use)
  else
    db[chunk] = List.new { use }
  end
end
<<*>>=
--global curfile		# unique id of the current @file
--global lastbeginarg	# identifies last chunk (for -delay)
<<initialization>>=
curfile = "standard input?"
lastbeginarg = "never any chunks?"
@
[[anchorlabel]] is the label that references to a code chunk refer to.
The {\LaTeX} back end typically uses the chunk itself, but the HTML
back end will use a spot in the preceding documentation chunk (if
any), as requested by [[-docanchor]] (and non-null [[anchordist]])
and recorded in [[anchorlabel]].
<<*>>=
--global allchunks, allidents
--global indexlabels, defanchors, uses, anchorlabel, indexanchorlabel
<<initialization>>=
allchunks = Set.new ()
allidents = Set.new ()
indexlabels = { }
defanchors = { }
defcounts  = { }
Noidx.defanchors = defanchors
uses = { }
anchorlabel = { }
indexanchorlabel = { }
@
I set [[textnonblank]] non-null if some text line in the current chunk
contains a non-blank character.
This trick lets me avoid planting anchors in empty documentation chunks.
<<cases for pass 1>>=
 --  static lastdefnlabel, thisusecount, lastanchorlabel, nonblank, textnonblank
 --  initial nonblank = ~' \t'

elseif key == NW_FILE then curfile = Noidx.uniqueid(arg)
elseif key == NW_BEGIN_DOCS or key == NW_BEGIN_CODE then
             lastbegin = key; lastbeginarg = arg; textnonblank = nil
elseif key == NW_END_DOCS then if anchordist and textnonblank then
                   <<insert and set [[lastanchorlabel]]>>
                 else
                   lastanchorlabel = nil
                 end
elseif key == NW_END_CODE then lastanchorlabel = nil
elseif key == NW_TEXT then textnonblank = textnonblank or strfind(arg, '[%S]')
elseif key == NW_DEFN then
        Set.insert(allchunks, arg)
        lastdefnlabel = Noidx.newdefnlabel(arg)
        NWB.put(newbuf, NW_XREF_LABEL, lastdefnlabel)
        lastanchorlabel = lastanchorlabel or lastdefnlabel
        anchorlabel[arg] = anchorlabel[arg] or lastanchorlabel
        Noidx.addlabel(defanchors, arg, lastanchorlabel)
        Noidx.addud(chunkud, "defn", arg, lastanchorlabel)
        thisusecount = 0
<<write output database>>=
if dboutfile then
  local oldout = writetox(dboutfile)
  local chunk, v = next(defanchors, chunk)
  while chunk do
    local n = defout[chunk] or 0
    if v[1] and v[n] then    
      write(format('  Noidx.add_db_defns(%q, %q, %q)\n', chunk, v[1], v[n]))
    end
    chunk, v = next(defanchors, chunk)
  end
  chunk, v = next(uses, chunk)
  while chunk do
    local n = 1
    while v[n] do
      write(format('  Noidx.add_db_use(%q, %q)\n', chunk, v[n]))
      n = n + 1
    end
    chunk, v = next(uses, chunk)
  end
  writeto(oldout)
end
<<cases for pass 1>>=
elseif key == NW_USE then
   if lastbegin == NW_BEGIN_CODE then
          Set.insert(allchunks, arg)
          thisusecount = thisusecount + 1
          NWB.put(newbuf, NW_XREF_LABEL, lastdefnlabel .. "-u" .. thisusecount)
          Noidx.addlabel(uses, arg, lastanchorlabel)
          Noidx.addud(chunkud, "use", arg, lastanchorlabel)
   else
          textnonblank = textnonblank or strfind(arg, '[%S]')   
	                                   -- could appear in quoted code
   end
elseif key == NW_INDEX_USE then
    Set.insert(allidents, arg)
    if lastanchorlabel then Noidx.addud(indexud, "use", arg, lastanchorlabel) end
elseif key == NW_INDEX_DEFN or key ==  NW_INDEX_LOCALDEFN then
    Set.insert(allidents, arg)
    if lastanchorlabel then
      l = lastanchorlabel
    else
      l = Noidx.newdocslabel()
      NWB.put(newbuf, NW_XREF_LABEL, l)
    end
    Noidx.addud(indexud, "defn", arg, l)
    indexanchorlabel[arg] = indexanchorlabel[arg] or l
    NWB.put(newbuf, NW_XREF_REF, l) -- bug fix
@ 
%def allchunks allidents indexlabels defanchors uses curfile lastbeginarg anchorlabel
The bug fix\label{multi-def-bug}
alluded to above occurs when there are multiple definitions of an identifier.
In this case, we can't just use [[indexanchorlabel[id]]], because that refers only to 
the first definition.  In the {\TeX} back end, that leads to bogus
tags like \hbox{\it x \small\rm 7b 7b 7b} instead of \hbox{\it x
\small\rm 7b 9 12a}; the first tag is repeated again and again.
Because the tag for the current [[@defn]] is lost by the time pass~2
rolls around, we have to slip it in on pass~1.
@
<<insert and set [[lastanchorlabel]]>>=
lastanchorlabel = Noidx.insertAnchor(newbuf, anchordist)
<<*>>=
Noidx = Noidx or { }
function Noidx.insertAnchor(buf, n)
  local t = List.new {}
  local lbl = Noidx.newdocslabel()
  local k, v
  k, v = NWB.pull(buf)
  while k and n > 0 and k ~= NW_BEGIN_DOCS do
    if k == NW_NL then n = n - 1 end
    List.put(t, {k, v})
    k, v = NWB.pull(buf)
  end
  NWB.put(buf, k, v)
  NWB.put(buf, NW_XREF_LABEL, lbl)
  n = List.length(t)
  while n > 0 do
    local p = t[n]
    NWB.put(buf, p[1], p[2])
    n = n - 1
  end
  return lbl
end
@ 
<<*>>=
--  static thesedefns, theseuses
--  static thischunk # null for docs chunk, arg of @defn for code chunk
--  static defout		# number of definitions emitted for each chunk
<<initialization>>=
defout = { }   -- regrettably, can't set default to 0
<<cases for pass 2>>=
elseif key == NW_BEGIN_DOCS or key == NW_BEGIN_CODE then
    if delay and lastbeginarg == arg then <<write trailers if not already written>> end
    NWB.put(sinkbuf, key, arg)
    thesedefns = Set.new ()
    theseuses  = Set.new ()
    thischunk = nil
elseif key == NW_DEFN then
    thischunk = arg
    if anchorlabel[arg] then NWB.put(sinkbuf, NW_XREF_REF, anchorlabel[arg]) end
    NWB.put(sinkbuf, key, arg)
    <<write chunk cross-reference>>
elseif key == NW_END_CODE then
    -- must postpone index cross-reference to end of chunk because
    -- the info is accumulated in [[thesdefns]] and [[theseuses]] on this pass
    <<write index cross-reference>>
    NWB.put(sinkbuf, key, arg)
elseif key == NW_USE then
    -- may not be right, but is something, anyway
    local l = anchorlabel[arg] or
              (prevdb[arg] and prevdb[arg].first) or 
              (nextdb[arg] and nextdb[arg].first) or 
              "nw@notdef"
    NWB.put(sinkbuf, NW_XREF_REF, l) -- was "???"
    NWB.put(sinkbuf, key, arg)
elseif key == NW_INDEX_DEFN or key == NW_INDEX_LOCALDEFN then
    Set.insert(thesedefns, arg) -- no xref ref because of bug fix
    NWB.put(sinkbuf, key, arg)
elseif key == NW_INDEX_USE then
    Set.insert(theseuses, arg) -- no xref ref because of bug fix
    if indexanchorlabel[arg] then
      NWB.put(sinkbuf, NW_XREF_REF, indexanchorlabel[arg]) 
    end
    NWB.put(sinkbuf, key, arg)
elseif key == NW_TEXT then -- grotesque hack! for chunks and index in HTML
   if not thischunk then -- docs mode
     if arg == "<nowebchunks>" then Noidx.lognowebchunks(sinkbuf)
     elseif arg == "<nowebindex>"  then Noidx.lognowebindex(sinkbuf)
     else NWB.put(sinkbuf, key, arg)
     end
   else
    NWB.put(sinkbuf, key, arg)
   end
elseif key == NW_FATAL then NWB.put(sinkbuf, key, arg); exit(1)
elseif key == NW_TRAILER then <<write trailers if not already written>>
                 NWB.put(sinkbuf, key, arg)
else
  NWB.put(sinkbuf, key, arg)
@ 
%def thischunk thislabel thesedefns theseuses
The case of the [[@index defn]] is the one case where we don't emit a
reference, because the reference has to go in earlier.  See
page~\pageref{multi-def-bug} for an explanation.
@
<<write chunk cross-reference>>=
defout[thischunk] = (defout[thischunk] or 0) + 1
if defanchors[thischunk][defout[thischunk] - 1] then -- fail if first
  NWB.put(sinkbuf, NW_XREF_PREVDEF, defanchors[thischunk][defout[thischunk] - 1])
end
if defanchors[thischunk][defout[thischunk] + 1] then -- fail if last
  NWB.put(sinkbuf, NW_XREF_NEXTDEF, defanchors[thischunk][defout[thischunk] + 1])
end
if defout[thischunk] == 1 then 
  <<write use and def summary for chunk cross-reference>>
end
<<write index cross-reference>>=
theseuses = Set.diff(theseuses, thesedefns)
if Set.length(thesedefns) > 0 then
  NWB.put(sinkbuf, NW_INDEX_BEGINDEFS)
  local l = sort(alphacmp, Set.members(thesedefns))
  while List.length(l) > 0 do 
    local i = List.get(l)
    local us = indexud[i]
    if us then
      local j = 1
      local uslen = List.length(us)
      while j <= uslen do
        if strfind(us[j], "^use ") then
          NWB.put(sinkbuf, NW_INDEX_ISUSED, strsub(us[j], 5))
        end
        j = j + 1
      end
    end
    NWB.put(sinkbuf, NW_INDEX_DEFITEM, i)
  end
  NWB.put(sinkbuf, NW_INDEX_ENDDEFS)
end
if Set.length(theseuses) > 0 then 
  l = sort(alphacmp, Set.members(theseuses))
  NWB.put(sinkbuf, NW_INDEX_BEGINUSES)
  while List.length(l) > 0 do 
    i = List.get(l)
    local ds = indexud[i]
    if ds then
      local dslen = List.length(ds)
      j = 1
      while j <= dslen do
        if strfind(ds[j], "^defn ") then
          NWB.put(sinkbuf, NW_INDEX_ISDEFINED, strsub(ds[j], 6))
        end
        j = j + 1
      end
    end
    NWB.put(sinkbuf, NW_INDEX_USEITEM, i)
  end
  NWB.put(sinkbuf, NW_INDEX_ENDUSES)
end
-- this code is also commented out in the Icon version
--  every write("@literal \\nwindexuse{", TeXliteral(ident = !l), "}",
--                          "{", indexlabels[ident], "}{", thislabel, "}")
<<write use and def summary for chunk cross-reference>>=
if List.length(defanchors[thischunk]) > 1 then
  NWB.put(sinkbuf, NW_XREF_BEGINDEFS)
  k = 2
  while k <= List.length(defanchors[thischunk]) do
    NWB.put(sinkbuf, NW_XREF_DEFITEM, defanchors[thischunk][k])
    k = k + 1
  end
  NWB.put(sinkbuf, NW_XREF_ENDDEFS)
end
if uses[thischunk] or usedb[thischunk] then
  local l = uses[thischunk] .. usedb[thischunk]
  NWB.put(sinkbuf, NW_XREF_BEGINUSES)
  local k = 1
  while l[k] do
    NWB.put(sinkbuf, NW_XREF_USEITEM, l[k])
    k = k + 1
  end
  NWB.put(sinkbuf, NW_XREF_ENDUSES)
else 
  NWB.put(sinkbuf, NW_XREF_NOTUSED, thischunk)
end
@ 
The following code is incompatible with Noweb 2.10c, but it produces
better labels, which make the 152 text work better because it doesn't
matter if files are processed together or separately.
Noweb~2.10d has been changed to use this method, too.
<<*>>=
function Noidx.newdefnlabel(arg)
  defanchors[arg] = defanchors[arg] or List.new()
  local key = curfile .. "-" .. Noidx.uniqueid(arg)
  defcounts[key] = (defcounts[key] or 0) + 1
  return "NW" .. key .. "-" .. alphacode(defcounts[key])
end
<<initialization>>=
Noidx.docsLabelCount = 0
<<*>>=
function Noidx.newdocslabel()
  Noidx.docsLabelCount = Noidx.docsLabelCount + 1
  return "NWD" .. curfile .. "-" .. alphacode(Noidx.docsLabelCount)
end
<<*>>=
function Noidx.addlabel(tbl, arg, label)
  tbl[arg] = tbl[arg] or List.new {}
  local n = List.length(tbl[arg])
  if n == 0 or tbl[arg][n] ~= label then
    List.put(tbl[arg], label)
  end
  return label
end
<<*>>=      
-- global chunkud, indexud
function Noidx.addud(udlist, name, arg, label)
  udlist[arg] = udlist[arg] or List.new {}
  local s = name .. " " .. label
  local n = List.length(udlist[arg])
  if not (n > 0 and udlist[arg][n] == s) then
    List.put(udlist[arg], s)
  end
end
<<initialization>>=
chunkud = {}
indexud = {}
@
Because it's silly to have both a use and a definition point to the same chunk, 
I strip out uses that list the same chunk as their definitions.
<<*>>=
function Noidx.strip_extra_uses(udlista)
  local old, new, item, i, n
  n = List.length(udlista)
  new = List.new {}
  newnext = 1
  local ud_set = { }
  i = 1
  while i <= n do
    ud_set[udlista[i]] = 1
    i = i + 1
  end
  i = 1
  while i <= n do  
    item = udlista[i]
    i = i + 1
    if strfind(item, "^defn ") then
      <<add item if needed>>
    elseif strfind(item, "^use ") then
      if not ud_set["defn " .. strsub(item, 5)] then
        <<add item if needed>>
      end
    end
  end
  return new
end
<<add item if needed>>=
if new[newnext-1] ~= item then 
  List.put(new, item)
  newnext = newnext + 1
end
@
[[uniqueid]] eliminates both {\TeX} and HTML specials.
Key counts can be initialized by a cheating, lying script elsewhere.
<<initialization>>=
Noidx.idtable = {}
Noidx.keycounts = {} -- can't make 0 default
Noidx.crc_prefix = Noidx.crc_prefix or ''
Noidx.active_crc_prefix = ''
<<case for [[crc_prefix]]>>=
elseif key == "crc_prefix" then Noidx.active_crc_prefix = arg == "on" and Noidx.crc_prefix or ""
<<*>>=
function Noidx.uniqueid(name)
  if not Noidx.idtable[name] then
    -- local key = Noidx.make_key(gsub(name, '[^%a%d!$%(%)%*+,%./:;=%?@|]', "*")) 
    local key = alphacode_crc(Noidx.active_crc_prefix .. name)
    local c = Noidx.keycounts
    c[key] = (c[key] or 0) + 1
    if c[key] > 1 then
      Noidx.idtable[name] = key .. "." .. alphacode(c[key])
    else
      Noidx.idtable[name] = key 
    end
  end
  return Noidx.idtable[name]
end
<<icon>>=
make(key, len) = 
    key ? return make_key(3(tab(upto('/')), ="/", tab(many(noslash)), pos(0)), *key) |
                 key[1+:3] || alphacode(\len | *key) |
                 key || (alphacode(\len) | "")
<<icon 2>>=
make(key, len) = 
return if has / then
  make_key(tail, strlen(key))
else if has 3 then first 3 || alphacode(\len | *key)
else key || (alphacode(\len) | "")
<<icon 3>>=
make(key) = 
return if has / then
  if *tail >= 3 then first 3 || alphacode(strlen(key))
  else tail || alphacode(strlen(key))
else if has 3 then first 3 || alphacode(*key)
else key 
<<*>>=
function Noidx.make_key(key)
  local answer
  if strfind(key, "/") then
    local coda = alphacode(strlen(key))
    key = gsub(key, "^.*/", "")  -- use basename
    if strlen(key) > 3 then
      return strsub(key, 1, 3) .. coda
    else
      return key .. coda
    end
  else
    if strlen(key) > 3 then
      return strsub(key, 1, 3) .. alphacode(strlen(key))
    else
      return key
    end
  end
end
<<*>>=
-- global wrote_trailers
<<write trailers if not already written>>=
if not Noidx.wrote_trailers then
   Noidx.wrote_trailers = 1
   NWB.put(sinkbuf, NW_NL)
   NWB.put(sinkbuf, NW_NL)
   Noidx.lognowebchunks(sinkbuf)
   Noidx.lognowebindex(sinkbuf) 
end
<<initialization>>=
Noidx.wrote_trailers = nil
@
Now, a special hack, so we can write this stuff in the right place on pass 2.
<<*>>=
function Noidx.lognowebchunks(sinkbuf)
  if Noidx.logged_chunks then return end
  Noidx.logged_chunks = 1

  local l = sort(alphacmp, Set.members(allchunks))
  NWB.put(sinkbuf, NW_XREF_BEGINCHUNKS)
  local n = List.length(l)
  local i = 1
  while i <= n do
    local name = l[i]
    i = i + 1
    NWB.put(sinkbuf, NW_XREF_CHUNKBEGIN, 
                     (anchorlabel[name] or "nw@notdef") .. " " .. name)
    local cud = chunkud[name]
    if cud then
      local m = List.length(cud)
      local j = 1
      while j <= m do
        local r = cud[j]
        if strfind(r, "^defn ") then
          NWB.put(sinkbuf, NW_XREF_CHUNKDEFN, strsub(r, 6))
        else
          NWB.put(sinkbuf, NW_XREF_CHUNKUSE, strsub(r, 5))
        end
        j = j + 1
      end
    end
    NWB.put(sinkbuf, NW_XREF_CHUNKEND)
  end
  NWB.put(sinkbuf, NW_XREF_ENDCHUNKS)
end
<<initialization>>=
Noidx.logged_chunks = nil
Noidx.logged_index = nil
<<*>>=
function Noidx.lognowebindex(sinkbuf)
  if Noidx.logged_index then return end
  Noidx.logged_index = 1

  local l = sort(alphacmp, Set.members(allidents))
  NWB.put(sinkbuf, NW_INDEX_BEGININDEX)
  local n = List.length(l)
  local i = 1
  while i <= n do
    local name = l[i]
    i = i + 1
    NWB.put(sinkbuf, NW_INDEX_ENTRYBEGIN,
                     (indexanchorlabel[name] or "nw@notdef") .. " " .. name)
    local iud = indexud[name]
    iud = iud and Noidx.strip_extra_uses(iud)
    if iud then
      local m = List.length(iud)
      local j = 1
      while j <= m do
        local r = iud[j]
        if strfind(r, "^defn ") then
          NWB.put(sinkbuf, NW_INDEX_ENTRYDEFN, strsub(r, 6))
        else
          NWB.put(sinkbuf, NW_INDEX_ENTRYUSE, strsub(r, 5))
        end
        j = j + 1
      end
    end
    NWB.put(sinkbuf, NW_INDEX_ENTRYEND)
  end
  NWB.put(sinkbuf, NW_INDEX_ENDINDEX)
end
<<*>>=
Noidx.alphacodes = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"

function alphacode(n)
  if n < 0 then 
    return  "-" .. alphacode(-n)
  elseif n >= 62 then -- 62 is length of alphacodes
    local pfx = floor(n / 62)
    return alphacode(pfx) .. alphacode(n - 62 * pfx)
  else
    return strsub(Noidx.alphacodes, n+1, n+1)
  end
end
@ 
<<*>>=
function Noidx.rcsinfo () 
  return "$Id$" ..
         "$Name$"
end
@
\section{List of chunks}
\nowebchunks

\twocolumn
\section{Index}
\nowebindex
@
\end{document}
