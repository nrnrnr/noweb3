% -*- mode: Noweb; noweb-code-mode: fundamental-mode -*-
\section{Eliding unwanted code chunks}

This filter removes from the pipline any code chunk
    whose name matches any of the ``globbing'' patterns given it as
    arguments.  These are the familiar file name globbing patterns.  For
    example: [[elide 'RefMan_Ch*']] will prevent weaving a chunk
    defined as ``\LA{}RefMan\_Chapter\_14\RA{}''.

You could also use this filter when tangling, but it's not clear why you'd want to.

<<hackers: subsubsections for internal filters>>=
\subsubsection{The filter \texttt{Stages.elide}}
The filter \texttt{Stages.elide} removes code chunks from a stream.
It is most frequently used to remove ``code chunks'' that actually
contain documentation destined for a man page or user manual.
Its arbitrary argument is a list of strings, each of which is a ``glob
pattern.''
(In a glob pattern, \texttt{*} matches any string, and \texttt{?}
matches any single character.)
The filter removes definitions matching any of the glob patterns in
the arguments.
For example, this section of this manual
actually appears in a code chunk named
\emph{$\langle$hackers: subsections for internal filters$\rangle$}.
To prepare internal documentation for the stages, we use
\texttt{Stages.elide} with the argument \texttt{hackers:*}.

FIXME: Also undocumented \texttt{-eat} option.

@
\subsection{Eliding}
The main loop simply copies the input to the output.
We stop only if we see [[@begin code]], because that means we might
need to elide.
<<*>>=
function Stages.elide(sourcebuf, sinkbuf, globs)
  local rcsinfo = "$Id$" ..
                  "$Name$"
  local r = NWB.reader(sourcebuf)
  if type(globs) == "string" then globs = List.fromstring(globs) end
  local eat = nil
  if globs[1] == "-eat" then List.get(globs); eat = List.get(globs) end
  local key, arg
  key, arg = NWB.read(r)
  while key do 
    if key == NW_BEGIN_CODE then
      <<see about eliding this chunk>>
    else
      NWB.put(sinkbuf, key, arg)
      key, arg = NWB.read(r)
    end
  end
  return 0
end
@
To see about eliding, we accumulate lines until we see [[@defn]].
At that point we can either keep the chunk, which means printing the
accumulated lines and returning to the main loop, or elide it, which
means draining the input until the next [[@end code]].
<<see about eliding this chunk>>=
local accum = List.new { key, arg }
key, arg = NWB.read(r)
while key and key ~= NW_DEFN do
  List.put(accum, key); List.put(accum, arg)
  key, arg = NWB.read(r)
end
<<set [[matches]] if [[arg]] matches a pattern in [[globs]]>>
if matches then
  -- discard accum and everything up the next @end code, replacing newlines by eat
  if eat then
    while List.length(accum) >= 2 do
      local k = List.get(accum)
      local a = List.get(accum)
      if k == NW_NL or k == NW_INDEX_NL then
        NWB.put(sinkbuf, "literal", eat)        
        NWB.put(sinkbuf, NW_NL, a)
      end
    end
  end

  if eat then
    while key and key ~= NW_END_CODE do
      if key == NW_NL or key == NW_INDEX_NL then
        NWB.put(sinkbuf, "literal", eat)        
        NWB.put(sinkbuf, NW_NL, arg)
      end
      key, arg = NWB.read(r)
    end
  else  
    while key and key ~= NW_END_CODE do
      key, arg = NWB.read(r)
    end
  end
  if key then key, arg = NWB.read(r) end
else
  while List.length(accum) >= 2 do
    local k = List.get(accum)
    local a = List.get(accum)
    NWB.put(sinkbuf, k, a)
  end
end
<<set [[matches]] if [[arg]] matches a pattern in [[globs]]>>=
local matches
local i, n = 1, List.length(globs)
while i <= n and not matches do
  if matchpattern(arg, globs[i]) then matches = 1
  end
  i = i + 1
end
@
[[Stages.elideuse]] elides uses, plus following whitespace,
and if whitespace and a newline follow, the use and the preceding whitespace.
<<*>>=
function Stages.elideuse(sourcebuf, sinkbuf, globs)
  local rcsinfo = "$Id$" ..
                  "$Name$"
  local r = NWB.reader(sourcebuf)
  if type(globs) == "string" then globs = List.fromstring(globs) end
  local eat = nil
  if globs[1] == "-eat" then List.get(globs); eat = List.get(globs) end
  local key, arg
  key, arg = NWB.read(r)
  local eliding = nil
  while key do 
    if key == NW_USE then
        <<set [[matches]] if [[arg]] matches a pattern in [[globs]]>>
        if matches then
          eliding = 1
        else
          NWB.put(sinkbuf, key, arg)
        end
    elseif key == NW_TEXT then
        if eliding and strfind(arg, "^%s*$") then
          -- do nothing
        else
 	  eliding = nil
          NWB.put(sinkbuf, key, arg)
        end
    elseif key == NW_NL then
        if eliding then
          local k, a = NWB.pull(sinkbuf)
          while k == NW_TEXT and strfind(a, "^%s*$") do
            k, a = NWB.pull(sinkbuf)
          end
          NWB.put(sinkbuf, k, a)
          if eat then NWB.put(sinkbuf, "literal", eat) end
          eliding = nil
        end
        NWB.put(sinkbuf, key, arg)
    else
      NWB.put(sinkbuf, key, arg)
    end
    key, arg = NWB.read(r)
  end
  return 0
end

